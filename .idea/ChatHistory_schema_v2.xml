<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistoryState">
    <option name="serializedSessions">
      <map>
        <entry key="d744fa40-1a04-4679-9908-19227012c9e0" value="{&quot;id&quot;:&quot;d744fa40-1a04-4679-9908-19227012c9e0&quot;,&quot;name&quot;:&quot;Improving Game Mode Design and UI in Multiply App&quot;,&quot;timestamp&quot;:1755866018394,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/di/AppModule.kt, lines\u003dALL(1-27)\npackage com.stephenwanjala.multiply.di\n\nimport android.app.Application\nimport androidx.datastore.core.DataStore\nimport androidx.datastore.preferences.core.PreferenceDataStoreFactory\nimport androidx.datastore.preferences.core.Preferences\nimport androidx.datastore.preferences.preferencesDataStoreFile\nimport dagger.Module\nimport dagger.Provides\nimport dagger.hilt.InstallIn\nimport dagger.hilt.components.SingletonComponent\nimport javax.inject.Singleton\n\n@Module\n@InstallIn(SingletonComponent::class)\nobject AppModule {\n    private const val MULTIPLYPREFRENCES \u003d\&quot;MULTIPLYPREFRENCES\&quot;\n\n    @Provides\n    @Singleton\n    fun provideDataStorePreferences(app: Application): DataStore\u003cPreferences\u003e \u003d\n        PreferenceDataStoreFactory.create(\n            produceFile \u003d {\n                app.preferencesDataStoreFile(MULTIPLYPREFRENCES)\n            }\n        )\n}\n```\n\u003c/current_file\u003e\n\n\n\u003cattached_files\u003e\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/GameMode.kt, lines\u003dALL(1-466)\npackage com.stephenwanjala.multiply.game\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\nimport androidx.compose.foundation.layout.FlowRow\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.graphics.Shadow\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.tooling.preview.PreviewScreenSizes\nimport androidx.compose.ui.unit.TextUnit\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.stephenwanjala.multiply.R\nimport com.stephenwanjala.multiply.game.components.animatedBackground\nimport com.stephenwanjala.multiply.game.components.glowingOrbs\nimport com.stephenwanjala.multiply.game.components.neumorphicShadow\nimport com.stephenwanjala.multiply.game.components.repeatLiquidBackground\nimport com.stephenwanjala.multiply.game.models.BubbleMathDifficulty\nimport com.stephenwanjala.multiply.game.models.GameMode\nimport com.stephenwanjala.multiply.game.models.QuizDifficulty\nimport com.stephenwanjala.multiply.ui.theme.MultiplyTheme\n\n@Composable\nfun GameModeSelectionScreen(onConfirm: (GameMode) -\u003e Unit) {\n    var selectedMode by remember { mutableStateOf\u003cGameMode?\u003e(null) }\n    var selectedDifficulty by remember { mutableStateOf\u003cAny?\u003e(null) }\n\n    val gameModes \u003d mapOf(\n        \&quot;Bubble Math Blitz\&quot; to BubbleMathDifficulty.entries,\n        \&quot;Quiz Genius\&quot; to QuizDifficulty.entries\n    )\n\n    Box(\n        modifier \u003d Modifier\n            .fillMaxSize()\n            .background(\n                brush \u003d Brush.radialGradient(\n                    colors \u003d listOf(\n                        Color(0xFF2A0A45),\n                        MaterialTheme.colorScheme.background,\n                        MaterialTheme.colorScheme.primary,\n                        Color(0xFF0A0420)\n                    )\n                )\n            )\n            .repeatLiquidBackground()\n            .glowingOrbs()\n    ) {\n        Column(\n            modifier \u003d Modifier\n                .fillMaxSize()\n                .animatedBackground()\n                .padding(24.dp),\n            horizontalAlignment \u003d Alignment.CenterHorizontally\n        ) {\n            // Header\n            Row(\n                modifier \u003d Modifier.fillMaxWidth(),\n                horizontalArrangement \u003d Arrangement.spacedBy(30.dp),\n                verticalAlignment \u003d Alignment.CenterVertically\n            ) {\n                NeonText(\n                    text \u003d \&quot;SELECT MODE\&quot;,\n                    gradient \u003d listOf(Color(0xFF00F9FF), Color(0xFF8A2BE2)),\n                    modifier \u003d Modifier.padding(vertical \u003d 16.dp)\n                )\n                Image(\n                    painter \u003d painterResource(id \u003d R.drawable.math_mascot),\n                    contentDescription \u003d null,\n                    modifier \u003d Modifier.size(60.dp)\n                )\n            }\n\n            Spacer(modifier \u003d Modifier.height(32.dp))\n\n            // Game Mode Cards\n            Row(\n                modifier \u003d Modifier.fillMaxWidth(),\n                horizontalArrangement \u003d Arrangement.SpaceEvenly\n            ) {\n                gameModes.keys.forEach { modeName -\u003e\n                    NeuGameModeCard(\n                        mode \u003d modeName,\n                        isSelected \u003d selectedMode?.let {\n                            when (it) {\n                                is GameMode.BubbleMathBlitz -\u003e modeName \u003d\u003d \&quot;Bubble Math Blitz\&quot;\n                                is GameMode.QuizGenius -\u003e modeName \u003d\u003d \&quot;Quiz Genius\&quot;\n                            }\n                        } ?: false,\n                        onClick \u003d {\n                            selectedMode \u003d when (modeName) {\n                                \&quot;Bubble Math Blitz\&quot; -\u003e GameMode.BubbleMathBlitz(BubbleMathDifficulty.EASY)\n                                \&quot;Quiz Genius\&quot; -\u003e GameMode.QuizGenius(QuizDifficulty.BEGINNER)\n                                else -\u003e null\n                            }\n                            selectedDifficulty \u003d null // Reset difficulty when mode changes\n                        }\n                    )\n                }\n            }\n\n            Spacer(modifier \u003d Modifier.height(32.dp))\n\n            // Difficulty Selection\n            selectedMode?.let { mode -\u003e\n                val levels \u003d when (mode) {\n                    is GameMode.BubbleMathBlitz -\u003e gameModes[\&quot;Bubble Math Blitz\&quot;]!!\n                    is GameMode.QuizGenius -\u003e gameModes[\&quot;Quiz Genius\&quot;]!!\n                }\n\n                NeuSectionTitle(text \u003d \&quot;DIFFICULTY LEVEL\&quot;)\n\n                LevelSelectionGrid(\n                    levels \u003d levels,\n                    selectedLevel \u003d selectedDifficulty,\n                    onLevelSelected \u003d { level -\u003e\n                        selectedDifficulty \u003d level\n                        selectedMode \u003d when (mode) {\n                            is GameMode.BubbleMathBlitz -\u003e GameMode.BubbleMathBlitz(level as BubbleMathDifficulty)\n                            is GameMode.QuizGenius -\u003e GameMode.QuizGenius(level as QuizDifficulty)\n                        }\n                    }\n                )\n            }\n            Spacer(modifier \u003d Modifier.height(16.dp))\n\n            // Confirm Button\n            GradientButton(\n                text \u003d \&quot;START QUEST\&quot;,\n                enabled \u003d selectedMode !\u003d null,\n                gradient \u003d listOf(Color(0xFF00E676), Color(0xFF00B8D4)),\n                onClick \u003d {\n                    selectedMode?.let {\n                        onConfirm(it)\n                        println(\&quot;The Game Mode $it\&quot;)\n                    }\n                }\n            )\n        }\n    }\n}\n\n@Composable\nfun NeuGameModeCard(mode: String, isSelected: Boolean, onClick: () -\u003e Unit) {\n    val elevation \u003d if (isSelected) 16.dp else 8.dp\n    val cardGradient \u003d listOf(Color(0xFF3A1C4A), Color(0xFF1A0F2E))\n\n    Card(\n        modifier \u003d Modifier\n            .width(200.dp)\n            .height(260.dp)\n            .neumorphicShadow(\n                blurRadius \u003d elevation,\n                shape \u003d RoundedCornerShape(24.dp),\n                lightColor \u003d Color(0x44FFFFFF),\n                darkColor \u003d Color(0x66000000)\n            )\n            .clickable(onClick \u003d onClick),\n        shape \u003d RoundedCornerShape(24.dp),\n        colors \u003d CardDefaults.cardColors(\n            containerColor \u003d if (isSelected) Color(0xFF2A1255) else Color(0xFF1A0A30)\n        )\n    ) {\n        Box(\n            modifier \u003d Modifier\n                .fillMaxSize()\n                .background(\n                    brush \u003d Brush.linearGradient(\n                        colors \u003d if (isSelected)\n                            listOf(Color(0xFF6A1B9A), Color(0xFF4527A0))\n                        else cardGradient\n                    )\n                )\n                .border(\n                    width \u003d 2.dp,\n                    brush \u003d Brush.linearGradient(\n                        colors \u003d listOf(Color(0x66FFFFFF), Color(0x00FFFFFF))\n                    ),\n                    shape \u003d RoundedCornerShape(24.dp)\n                ),\n            contentAlignment \u003d Alignment.Center\n        ) {\n            Column(horizontalAlignment \u003d Alignment.CenterHorizontally) {\n                Image(\n                    painter \u003d painterResource(\n                        id \u003d if (mode \u003d\u003d \&quot;Bubble Math Blitz\&quot;)\n                            R.drawable.bubblemuscot else R.drawable.math_mascot\n                    ),\n                    contentDescription \u003d mode,\n                    modifier \u003d Modifier.size(120.dp)\n                )\n\n                Spacer(modifier \u003d Modifier.height(16.dp))\n\n                Text(\n                    text \u003d mode.uppercase(),\n                    fontSize \u003d 18.sp,\n                    fontWeight \u003d FontWeight.ExtraBold,\n                    color \u003d Color.White,\n                    modifier \u003d Modifier\n                        .background(\n                            brush \u003d Brush.horizontalGradient(\n                                colors \u003d listOf(Color(0xFF00E5FF), Color(0xFFAA00FF))\n                            ),\n                            shape \u003d RoundedCornerShape(8.dp)\n                        )\n                        .padding(horizontal \u003d 16.dp, vertical \u003d 4.dp)\n                )\n\n                Spacer(modifier \u003d Modifier.height(8.dp))\n\n                Text(\n                    text \u003d if (mode \u003d\u003d \&quot;Bubble Math Blitz\&quot;)\n                        \&quot;Fast-paced arithmetic!\&quot; else \&quot;Strategic challenges!\&quot;,\n                    color \u003d Color(0xFFCCCCCC),\n                    fontSize \u003d 12.sp,\n                    modifier \u003d Modifier.padding(horizontal \u003d 12.dp)\n                )\n            }\n        }\n    }\n}\n\n@OptIn(ExperimentalLayoutApi::class)\n@Composable\nfun LevelSelectionGrid(\n    levels: List\u003cAny\u003e,\n    selectedLevel: Any?,\n    onLevelSelected: (Any) -\u003e Unit\n) {\n    val colors \u003d listOf(\n        Color(0xFF00C853), // Easy\n        Color(0xFFFFD600), // Medium\n        Color(0xFFFF3D00), // Hard\n        Color(0xFFD50000)  // Expert\n    )\n\n    FlowRow(\n        modifier \u003d Modifier.fillMaxWidth(),\n        horizontalArrangement \u003d Arrangement.spacedBy(16.dp),\n        verticalArrangement \u003d Arrangement.Center\n    ) {\n        levels.forEachIndexed { index, level -\u003e\n            val isSelected \u003d selectedLevel \u003d\u003d level\n            Box(\n                modifier \u003d Modifier\n                    .height(60.dp)\n                    .weight(1f)\n                    .padding(8.dp)\n                    .neumorphicShadow(\n                        blurRadius \u003d if (isSelected) 12.dp else 6.dp,\n                        shape \u003d RoundedCornerShape(16.dp),\n                        lightColor \u003d Color(0x44FFFFFF),\n                        darkColor \u003d Color(0x66000000)\n                    )\n                    .background(\n                        brush \u003d Brush.verticalGradient(\n                            colors \u003d if (isSelected)\n                                listOf(colors[index], colors[index].copy(alpha \u003d 0.8f))\n                            else listOf(Color(0x22FFFFFF), Color(0x11FFFFFF))\n                        ),\n                        shape \u003d RoundedCornerShape(16.dp)\n                    )\n                    .border(\n                        width \u003d 1.dp,\n                        brush \u003d Brush.linearGradient(\n                            colors \u003d listOf(Color(0x44FFFFFF), Color(0x00FFFFFF))\n                        ),\n                        shape \u003d RoundedCornerShape(16.dp)\n                    )\n                    .clickable { onLevelSelected(level) },\n                contentAlignment \u003d Alignment.Center\n            ) {\n                Text(\n                    text \u003d when (level) {\n                        is BubbleMathDifficulty -\u003e level.name\n                        is QuizDifficulty -\u003e level.name\n                        else -\u003e \&quot;Unknown\&quot;\n                    },\n                    color \u003d Color.White,\n                    fontWeight \u003d FontWeight.Bold,\n                    fontSize \u003d 14.sp,\n                    letterSpacing \u003d 1.2.sp,\n                    textAlign \u003d TextAlign.Center,\n                    overflow \u003d TextOverflow.Visible\n                )\n            }\n        }\n    }\n}\n\n// Neon Text Component\n@Composable\nfun NeonText(\n    text: String,\n    gradient: List\u003cColor\u003e,\n    modifier: Modifier \u003d Modifier,\n    fontSize: TextUnit \u003d 24.sp\n) {\n    val brush \u003d remember { Brush.linearGradient(colors \u003d gradient) }\n\n    Box(modifier \u003d modifier) {\n        Text(\n            text \u003d text,\n            fontSize \u003d fontSize,\n            fontWeight \u003d FontWeight.ExtraBold,\n            color \u003d Color.Transparent,\n            style \u003d MaterialTheme.typography.headlineMedium.copy(\n                shadow \u003d Shadow(\n                    color \u003d gradient.first().copy(alpha \u003d 0.5f),\n                    offset \u003d Offset(2f, 2f),\n                    blurRadius \u003d 12f\n                )\n            )\n        )\n        Text(\n            text \u003d text,\n            fontSize \u003d fontSize,\n            fontWeight \u003d FontWeight.ExtraBold,\n            style \u003d MaterialTheme.typography.headlineMedium,\n            color \u003d Color.White\n        )\n        Text(\n            text \u003d text,\n            fontSize \u003d fontSize,\n            fontWeight \u003d FontWeight.ExtraBold,\n            style \u003d MaterialTheme.typography.headlineMedium.copy(brush \u003d brush)\n        )\n    }\n}\n\n// Gradient Button Component\n@Composable\nfun GradientButton(\n    modifier: Modifier \u003d Modifier,\n    text: String,\n    gradient: List\u003cColor\u003e,\n    enabled: Boolean \u003d true,\n    onClick: () -\u003e Unit\n) {\n    val buttonGradient \u003d if (enabled) gradient else listOf(Color(0xFF666666), Color(0xFF444444))\n    val elevation \u003d if (enabled) 8.dp else 0.dp\n\n    Button(\n        onClick \u003d onClick,\n        enabled \u003d enabled,\n        modifier \u003d modifier\n            .neumorphicShadow(blurRadius \u003d elevation),\n        shape \u003d RoundedCornerShape(16.dp),\n        colors \u003d ButtonDefaults.buttonColors(containerColor \u003d Color.Transparent)\n    ) {\n        Box(\n            modifier \u003d Modifier\n                .background(\n                    brush \u003d Brush.linearGradient(buttonGradient),\n                    shape \u003d RoundedCornerShape(16.dp)\n                )\n                .border(\n                    width \u003d 2.dp,\n                    brush \u003d Brush.linearGradient(\n                        listOf(\n                            Color.White.copy(alpha \u003d 0.2f),\n                            MaterialTheme.colorScheme.background\n                        )\n                    ),\n                    shape \u003d RoundedCornerShape(16.dp)\n                ),\n            contentAlignment \u003d Alignment.Center\n        ) {\n            Text(\n                text \u003d text,\n                color \u003d Color.White,\n                fontSize \u003d 18.sp,\n                fontWeight \u003d FontWeight.Black,\n                letterSpacing \u003d 1.2.sp,\n                modifier \u003d Modifier.padding(16.dp)\n            )\n        }\n    }\n}\n\n// Neumorphic Section Title\n@Composable\nfun NeuSectionTitle(text: String) {\n    Row(\n        verticalAlignment \u003d Alignment.CenterVertically,\n        modifier \u003d Modifier.fillMaxWidth()\n    ) {\n        HorizontalDivider(\n            modifier \u003d Modifier\n                .weight(1f)\n                .neumorphicShadow(\n                    blurRadius \u003d 4.dp,\n                    shape \u003d RectangleShape,\n                    inverted \u003d true\n                ),\n            color \u003d Color(0x22FFFFFF),\n            thickness \u003d 1.dp\n        )\n        Text(\n            text \u003d text,\n            color \u003d Color(0xFF00E5FF),\n            modifier \u003d Modifier.padding(horizontal \u003d 16.dp),\n            fontSize \u003d 16.sp,\n            fontWeight \u003d FontWeight.Bold,\n            letterSpacing \u003d 1.1.sp\n        )\n        HorizontalDivider(\n            modifier \u003d Modifier\n                .weight(1f)\n                .neumorphicShadow(\n                    blurRadius \u003d 4.dp,\n                    shape \u003d RectangleShape,\n                    inverted \u003d true\n                ),\n            color \u003d Color(0x22FFFFFF),\n            thickness \u003d 1.dp\n        )\n    }\n}\n\n\n@PreviewScreenSizes\n@Composable\nprivate fun PreviewGameModes() {\n    MultiplyTheme {\n        GameModeSelectionScreen(onConfirm \u003d { _ -\u003e })\n    }\n}\n\n\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/components/AnimatedBackground.kt, lines\u003dALL(1-124)\npackage com.stephenwanjala.multiply.game.components\n\nimport android.graphics.Paint\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.draw.drawBehind\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.graphics.nativeCanvas\nimport androidx.compose.ui.graphics.toArgb\nimport androidx.compose.ui.layout.onSizeChanged\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.unit.toSize\nimport com.stephenwanjala.multiply.game.utlis.randomOffset\nimport kotlinx.coroutines.delay\nimport kotlin.random.Random\n\n@Composable\nfun AnimatedBackground() {\n    val symbols \u003d listOf(\&quot;1\&quot;, \&quot;2\&quot;, \&quot;3\&quot;, \&quot;4\&quot;, \&quot;5\&quot;, \&quot;6\&quot;, \&quot;7\&quot;, \&quot;8\&quot;, \&quot;9\&quot;, \&quot;+\&quot;, \&quot;-\&quot;, \&quot;×\&quot;, \&quot;÷\&quot;)\n    val colors \u003d listOf(Color.Red, Color.Blue, Color.Green, Color.Magenta, Color.Cyan, Color.Yellow)\n\n    Box(modifier \u003d Modifier.fillMaxSize()) {\n        repeat(30) {\n            var position by remember { mutableStateOf(randomOffset()) }\n            val symbol \u003d remember { symbols.random() }\n            val color \u003d remember { colors.random() }\n\n            Text(\n                text \u003d symbol,\n                color \u003d color.copy(alpha \u003d 0.6f),\n                fontSize \u003d 24.sp,\n                modifier \u003d Modifier\n                    .graphicsLayer {\n                        translationX \u003d position.x\n                        translationY \u003d position.y\n                    }\n            )\n\n            LaunchedEffect(Unit) {\n                while (true) {\n                    delay(Random.nextLong(3000, 5000))\n                    position \u003d randomOffset()\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun Modifier.animatedBackground(): Modifier \u003d composed {\n    val symbols \u003d listOf(\&quot;1\&quot;, \&quot;2\&quot;, \&quot;3\&quot;, \&quot;4\&quot;, \&quot;5\&quot;, \&quot;6\&quot;, \&quot;7\&quot;, \&quot;8\&quot;, \&quot;9\&quot;, \&quot;+\&quot;, \&quot;-\&quot;, \&quot;×\&quot;, \&quot;÷\&quot;)\n    val colors \u003d listOf(Color.Red, Color.Blue, Color.Green, Color.Magenta, Color.Cyan, Color.Yellow)\n\n    var size by remember { mutableStateOf(Size.Zero) }\n    var particles by remember { mutableStateOf(emptyList\u003cParticle\u003e()) }\n\n    LaunchedEffect(size) {\n        if (size \u003d\u003d Size.Zero) return@LaunchedEffect\n\n        // Initial particles\n        particles \u003d List(30) {\n            Particle(\n                position \u003d randomOffset(size),\n                symbol \u003d symbols.random(),\n                color \u003d colors.random()\n            )\n        }\n\n        // Animation loop\n        while (true) {\n            delay(1000) // Update every second\n            particles \u003d List(30) {\n                Particle(\n                    position \u003d randomOffset(size),\n                    symbol \u003d symbols.random(),\n                    color \u003d colors.random()\n                )\n            }\n        }\n    }\n\n    this\n        .onSizeChanged { newSize -\u003e size \u003d newSize.toSize() }\n        .drawBehind {\n            particles.forEach { particle -\u003e\n                drawContext.canvas.nativeCanvas.drawText(\n                    particle.symbol,\n                    particle.position.x,\n                    particle.position.y,\n                    Paint().apply {\n                        this.color \u003d particle.color.copy(alpha \u003d 0.6f).toArgb()\n                        textSize \u003d 40f\n                    }\n                )\n            }\n        }\n}\n\nprivate data class Particle(\n    val position: Offset,\n    val symbol: String,\n    val color: Color\n)\n\nprivate fun randomOffset(size: Size): Offset {\n    return Offset(\n        x \u003d Random.nextFloat() * size.width,\n        y \u003d Random.nextFloat() * size.height\n    )\n}\n\n\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/components/ConfettiAnimation.kt, lines\u003dALL(1-86)\npackage com.stephenwanjala.multiply.game.components\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.draw.drawBehind\nimport androidx.compose.ui.draw.drawWithContent\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.layout.onGloballyPositioned\nimport androidx.compose.ui.unit.IntSize\nimport com.stephenwanjala.multiply.game.utlis.Particle\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.launch\n\n@Composable\nfun ConfettiAnimation(particleCount: Int \u003d 100) {\n    val particles \u003d remember { List(particleCount) { Particle() } }\n    val scope \u003d rememberCoroutineScope()\n    var canvasSize by remember { mutableStateOf(IntSize(1000, 1000)) }\n\n    LaunchedEffect(Unit) {\n        particles.forEach { particle -\u003e\n            scope.launch {\n                while (isActive) {\n                    particle.update(canvasSize)\n                    delay(16L) // ~60 FPS\n                }\n            }\n        }\n    }\n\n    Box(\n        modifier \u003d Modifier\n            .fillMaxSize()\n            .onGloballyPositioned { canvasSize \u003d it.size }\n            .drawWithContent {\n                drawContent()\n                particles.forEach { particle -\u003e\n                    drawCircle(\n                        color \u003d particle.color,\n                        radius \u003d particle.size,\n                        center \u003d Offset(particle.x.value, particle.y.value)\n                    )\n                }\n            }\n    )\n}\n\nfun Modifier.confettiEffect(particleCount: Int \u003d 100): Modifier \u003d composed {\n    val particles \u003d remember { List(particleCount) { Particle() } }\n    val scope \u003d rememberCoroutineScope()\n    var canvasSize by remember { mutableStateOf(IntSize.Zero) }\n\n    LaunchedEffect(Unit) {\n        particles.forEach { particle -\u003e\n            scope.launch {\n                while (isActive) {\n                    particle.update(canvasSize)\n                    delay(16L) // ~60 FPS\n                }\n            }\n        }\n    }\n\n    this.drawBehind {\n        particles.forEach { particle -\u003e\n            drawCircle(\n                color \u003d particle.color,\n                radius \u003d particle.size,\n                center \u003d Offset(particle.x.value, particle.y.value)\n            )\n        }\n    }.onGloballyPositioned { layoutCoordinates -\u003e\n        canvasSize \u003d layoutCoordinates.size\n    }\n}\n\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/components/EffectsUtils.kt, lines\u003dALL(1-138)\npackage com.stephenwanjala.multiply.game.components\n\nimport androidx.compose.animation.core.LinearEasing\nimport androidx.compose.animation.core.animateFloat\nimport androidx.compose.animation.core.infiniteRepeatable\nimport androidx.compose.animation.core.rememberInfiniteTransition\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.draw.drawBehind\nimport androidx.compose.ui.draw.drawWithCache\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.BlendMode\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Path\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.drawOutline\nimport androidx.compose.ui.graphics.drawscope.Stroke\nimport androidx.compose.ui.graphics.drawscope.translate\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\n\nfun Modifier.neumorphicShadow(\n    offset: Dp \u003d 6.dp,\n    blurRadius: Dp \u003d 6.dp,\n    shape: Shape \u003d RoundedCornerShape(8.dp),\n    lightColor: Color \u003d Color.White.copy(alpha \u003d 0.7f),\n    darkColor: Color \u003d Color.Black.copy(alpha \u003d 0.2f),\n    inverted: Boolean \u003d false\n): Modifier \u003d\n    this.then(\n        Modifier.drawBehind {\n            val shadowOffset \u003d offset.toPx()\n            val shadowBlur \u003d blurRadius.toPx()\n            val alpha \u003d (shadowBlur / 100f).coerceIn(0f, 1f)\n            val outline \u003d shape.createOutline(size, layoutDirection, this)\n\n            fun drawShadow(color: Color, offset: Offset) {\n                drawOutline(\n                    outline \u003d outline,\n                    color \u003d color.copy(alpha \u003d alpha),\n                    style \u003d Stroke(width \u003d shadowBlur),\n//                    topLeft \u003d offset\n                )\n            }\n\n            if (inverted) {\n                drawShadow(darkColor, Offset(shadowOffset, shadowOffset))\n                drawShadow(lightColor, Offset(-shadowOffset, -shadowOffset))\n            } else {\n                drawShadow(lightColor, Offset(-shadowOffset, -shadowOffset))\n                drawShadow(darkColor, Offset(shadowOffset, shadowOffset))\n            }\n        }\n    )\n\n// Animated Border Modifier\nfun Modifier.animatedBorder(\n    brush: Brush,\n    shape: Shape \u003d RoundedCornerShape(8.dp),\n    borderWidth: Dp \u003d 2.dp\n): Modifier \u003d composed {\n    val infiniteTransition \u003d rememberInfiniteTransition()\n    val translateX by infiniteTransition.animateFloat(\n        initialValue \u003d 0f,\n        targetValue \u003d 1000f,\n        animationSpec \u003d infiniteRepeatable(\n            animation \u003d tween(5000, easing \u003d LinearEasing)\n        )\n    )\n\n    this.then(\n        Modifier.drawWithCache {\n            onDrawBehind {\n                val borderWidthPx \u003d borderWidth.toPx()\n                val brushHeight \u003d size.height + borderWidthPx * 2\n\n                drawRect(\n                    brush \u003d brush,\n                    topLeft \u003d Offset(-borderWidthPx + translateX, -borderWidthPx),\n                    size \u003d Size(brushHeight, brushHeight),\n                    blendMode \u003d BlendMode.SrcIn\n                )\n            }\n        }\n    )\n}\n\n// Background Effects\n@Composable\nfun Modifier.glowingOrbs() \u003d\n    this.then(Modifier.drawBehind {\n        listOf(\n            Pair(0.2f to 0.3f, Color(0xFF8A2BE2)),\n            Pair(0.7f to 0.1f, Color(0xFF00F9FF)),\n            Pair(0.5f to 0.8f, Color(0xFFFF4081))\n        ).forEach { (position, color) -\u003e\n            drawCircle(\n                brush \u003d Brush.radialGradient(\n                    colors \u003d listOf(color.copy(alpha \u003d 0.2f), Color.Transparent),\n                    center \u003d Offset(size.width * position.first, size.height * position.second),\n                    radius \u003d size.minDimension * 0.2f\n                ),\n                center \u003d Offset(size.width * position.first, size.height * position.second),\n                radius \u003d size.minDimension * 0.15f,\n                blendMode \u003d BlendMode.Plus\n            )\n        }\n    })\n\n@Composable\nfun Modifier.repeatLiquidBackground() \u003d\n    this.drawBehind {\n        val liquidColor \u003d Color(0x2200E5FF)\n        val patternSize \u003d 100.dp.toPx()\n        val path \u003d Path().apply {\n            moveTo(0f, patternSize)\n            quadraticTo(patternSize / 2, 0f, patternSize, patternSize)\n            quadraticTo(patternSize * 1.5f, patternSize * 2, patternSize * 2, patternSize)\n        }\n\n        repeat((size.width / patternSize).toInt() + 1) { x -\u003e\n            repeat((size.height / patternSize).toInt() + 1) { y -\u003e\n                translate(left \u003d x * patternSize, top \u003d y * patternSize) {\n                    drawPath(\n                        path \u003d path,\n                        color \u003d liquidColor,\n                        style \u003d Stroke(2.dp.toPx())\n                    )\n                }\n            }\n        }\n    }\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/components/FloatingSymbols.kt, lines\u003dALL(1-61)\npackage com.stephenwanjala.multiply.game.components\n\nimport androidx.compose.animation.core.LinearEasing\nimport androidx.compose.animation.core.RepeatMode\nimport androidx.compose.animation.core.animateFloat\nimport androidx.compose.animation.core.infiniteRepeatable\nimport androidx.compose.animation.core.rememberInfiniteTransition\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.unit.sp\nimport com.stephenwanjala.multiply.game.utlis.randomOffset\nimport kotlinx.coroutines.delay\nimport kotlin.random.Random\n\n@Composable\nfun FloatingSymbols() {\n    val symbols \u003d listOf(\&quot;+\&quot;, \&quot;-\&quot;, \&quot;×\&quot;, \&quot;÷\&quot;, \&quot;\u003d\&quot;)\n    Box(modifier \u003d Modifier.fillMaxSize()) {\n        repeat(20) {\n            var position by remember { mutableStateOf(randomOffset()) }\n            val symbol \u003d remember { symbols.random() }\n            val rotation by rememberInfiniteTransition().animateFloat(\n                initialValue \u003d 0f,\n                targetValue \u003d 360f,\n                animationSpec \u003d infiniteRepeatable(\n                    animation \u003d tween(4000, easing \u003d LinearEasing),\n                    repeatMode \u003d RepeatMode.Restart\n                )\n            )\n\n            Text(\n                text \u003d symbol,\n                color \u003d MaterialTheme.colorScheme.primary.copy(alpha \u003d 0.3f),\n                fontSize \u003d 24.sp,\n                modifier \u003d Modifier.graphicsLayer {\n                    translationX \u003d position.x\n                    translationY \u003d position.y\n                    rotationZ \u003d rotation\n                }\n            )\n\n            LaunchedEffect(Unit) {\n                while (true) {\n                    delay(Random.nextLong(3000, 5000))\n                    position \u003d randomOffset()\n                }\n            }\n        }\n    }\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/components/StartButton.kt, lines\u003dALL(1-68)\npackage com.stephenwanjala.multiply.game.components\n\nimport androidx.compose.animation.core.LinearEasing\nimport androidx.compose.animation.core.RepeatMode\nimport androidx.compose.animation.core.animateFloat\nimport androidx.compose.animation.core.infiniteRepeatable\nimport androidx.compose.animation.core.rememberInfiniteTransition\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.stephenwanjala.multiply.game.feat_bubblemode.GameViewModel\n\n@Composable\nfun StartButton(viewModel: GameViewModel) {\n    val transition \u003d rememberInfiniteTransition(label \u003d \&quot;gradientAnimation\&quot;)\n\n    val gradientOffset by transition.animateFloat(\n        initialValue \u003d 0f,\n        targetValue \u003d 500f,\n        animationSpec \u003d infiniteRepeatable(\n            animation \u003d tween(2000, easing \u003d LinearEasing),\n            repeatMode \u003d RepeatMode.Reverse\n        ),\n        label \u003d \&quot;gradientOffset\&quot;\n    )\n\n    val gradientBrush \u003d Brush.linearGradient(\n        colors \u003d listOf(\n            MaterialTheme.colorScheme.primary,\n            MaterialTheme.colorScheme.secondary,\n            MaterialTheme.colorScheme.tertiary\n        ),\n        start \u003d Offset(gradientOffset, 0f),\n        // Diagonal movement\n        end \u003d Offset(gradientOffset + 300f, 300f)\n    )\n\n    Box(\n        modifier \u003d Modifier\n            .padding(16.dp)\n            .clip(MaterialTheme.shapes.medium)\n            .background(gradientBrush)\n            .clickable { viewModel.startGame() }\n            .padding(horizontal \u003d 32.dp, vertical \u003d 16.dp),\n        contentAlignment \u003d Alignment.Center\n    ) {\n        Text(\n            text \u003d \&quot;Start Game\&quot;,\n            fontSize \u003d 24.sp,\n            fontWeight \u003d FontWeight.Bold,\n            color \u003d MaterialTheme.colorScheme.onPrimary\n        )\n    }\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/feat_bubblemode/GameInstructions.kt, lines\u003dALL(1-261)\npackage com.stephenwanjala.multiply.game.feat_bubblemode\n\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.input.nestedscroll.nestedScroll\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.tooling.preview.PreviewLightDark\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.stephenwanjala.multiply.R\nimport com.stephenwanjala.multiply.game.utlis.randomOffset\nimport com.stephenwanjala.multiply.ui.theme.MultiplyTheme\nimport kotlinx.coroutines.delay\nimport kotlin.random.Random\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InstructionsScreen(onStartGame: () -\u003e Unit, navigateUp: () -\u003e Unit) {\n    val scrollState \u003d rememberScrollState()\n    var startButtonScale by remember { mutableFloatStateOf(1f) }\n    val scrollBehavior \u003d TopAppBarDefaults.pinnedScrollBehavior()\n    Scaffold(topBar \u003d {\n        TopAppBar(title \u003d {\n            Text(\n                text \u003d \&quot;Game Instructions\&quot;,\n                fontWeight \u003d FontWeight.Bold,\n                style \u003d MaterialTheme.typography.headlineMedium\n            )\n        }, navigationIcon \u003d {\n            IconButton(onClick \u003d navigateUp) {\n                Icon(\n                    imageVector \u003d Icons.AutoMirrored.Default.ArrowBack,\n                    contentDescription \u003d \&quot;Navigate Up\&quot;\n                )\n            }\n        }, scrollBehavior \u003d scrollBehavior)\n    }) { paddingValues -\u003e\n\n        Surface(\n            modifier \u003d Modifier\n                .fillMaxSize()\n                .padding(paddingValues \u003d paddingValues),\n            color \u003d MaterialTheme.colorScheme.background\n        ) {\n            Box(modifier \u003d Modifier.fillMaxSize()) {\n                // Animated background\n                AnimatedBackground()\n\n                Column(\n                    modifier \u003d Modifier\n                        .fillMaxSize()\n                        .padding(16.dp),\n                    horizontalAlignment \u003d Alignment.CenterHorizontally\n                ) {\n                    // Mascot\n                    Image(\n                        painter \u003d painterResource(id \u003d R.drawable.math_mascot),\n                        contentDescription \u003d \&quot;Math Mascot\&quot;,\n                        modifier \u003d Modifier\n                            .size(150.dp)\n                            .padding(bottom \u003d 16.dp)\n                    )\n\n                    Text(\n                        text \u003d \&quot;Math Adventure!\&quot;,\n                        style \u003d MaterialTheme.typography.headlineLarge,\n                        fontWeight \u003d FontWeight.Bold,\n                        color \u003d Color(0xFF4CAF50),\n                        modifier \u003d Modifier.padding(bottom \u003d 24.dp)\n                    )\n                    Column(\n                        modifier \u003d Modifier\n                            .verticalScroll(scrollState)\n                            .nestedScroll(scrollBehavior.nestedScrollConnection)\n                    ) {\n                        InstructionCard(\n                            title \u003d \&quot;How to Play\&quot;,\n                            items \u003d listOf(\n                                \&quot;Solve multiplication problems\&quot;,\n                                \&quot;Answer before time runs out\&quot;,\n                                \&quot;Earn points for correct answers\&quot;,\n                                \&quot;Lose lives for mistakes\&quot;,\n                                \&quot;Beat your high score!\&quot;\n                            )\n                        )\n\n                        Spacer(modifier \u003d Modifier.height(16.dp))\n                        InstructionCard(\n                            title \u003d \&quot;Cool Features\&quot;,\n                            items \u003d listOf(\n                                \&quot;Fun math challenges\&quot;,\n                                \&quot;Colorful graphics\&quot;,\n                                \&quot;Exciting sound effects\&quot;,\n                                \&quot;Track your progress\&quot;,\n                                \&quot;Compete with friends\&quot;\n                            )\n                        )\n//            Spacer(modifier \u003d Modifier.height(32.dp))\n                        Button(\n                            onClick \u003d onStartGame,\n                            modifier \u003d Modifier\n                                .scale(startButtonScale)\n                                .animateContentSize(),\n                            shape \u003d MaterialTheme.shapes.medium\n                        ) {\n                            Text(\&quot;Start Your Adventure!\&quot;, fontSize \u003d 18.sp)\n                        }\n                    }\n\n\n\n\n\n\n                    LaunchedEffect(Unit) {\n                        while (true) {\n                            startButtonScale \u003d 1.1f\n                            delay(500)\n                            startButtonScale \u003d 1f\n                            delay(500)\n                        }\n                    }\n                }\n            }\n\n        }\n    }\n}\n\n@Composable\nfun InstructionCard(title: String, items: List\u003cString\u003e) {\n    Card(\n        modifier \u003d Modifier\n            .fillMaxWidth()\n            .padding(8.dp),\n        elevation \u003d CardDefaults.cardElevation(defaultElevation \u003d 4.dp),\n        colors \u003d CardDefaults.cardColors(containerColor \u003d Color(0xFFFFF9C4))\n    ) {\n        Column(modifier \u003d Modifier.padding(16.dp)) {\n            Text(\n                text \u003d title,\n                style \u003d MaterialTheme.typography.titleLarge,\n                fontWeight \u003d FontWeight.Bold,\n                color \u003d Color(0xFF3F51B5),\n                modifier \u003d Modifier.padding(bottom \u003d 8.dp)\n            )\n            items.forEach { item -\u003e\n                Row(\n                    modifier \u003d Modifier.padding(vertical \u003d 4.dp),\n                    verticalAlignment \u003d Alignment.CenterVertically\n                ) {\n                    Box(\n                        modifier \u003d Modifier\n                            .size(8.dp)\n                            .background(\n                                brush \u003d Brush.linearGradient(\n                                    colors \u003d listOf(\n                                        MaterialTheme.colorScheme.primaryContainer,\n                                        Color(\n                                            0xFFFFA000\n                                        ),\n                                        MaterialTheme.colorScheme.primary\n                                    )\n                                ), shape \u003d RoundedCornerShape(50)\n                            )\n                    )\n                    Spacer(modifier \u003d Modifier.width(8.dp))\n                    Text(\n                        text \u003d item, style \u003d MaterialTheme.typography.bodyLarge,\n                        color \u003d MaterialTheme.colorScheme.primary\n                    )\n                }\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun AnimatedBackground() {\n    val symbols \u003d listOf(\&quot;+\&quot;, \&quot;-\&quot;, \&quot;×\&quot;, \&quot;÷\&quot;, \&quot;\u003d\&quot;)\n    val colors \u003d listOf(Color.Red, Color.Blue, Color.Green, Color.Magenta, Color.Cyan)\n\n    Box(modifier \u003d Modifier.fillMaxSize()) {\n        repeat(20) {\n            var position by remember { mutableStateOf(randomOffset()) }\n            val symbol \u003d remember { symbols.random() }\n            val color \u003d remember { colors.random() }\n\n            Text(\n                text \u003d symbol,\n                color \u003d color,\n                fontSize \u003d 24.sp,\n                modifier \u003d Modifier\n                    .offset { IntOffset(position.x.toInt(), position.y.toInt()) }\n            )\n\n            LaunchedEffect(Unit) {\n                while (true) {\n                    delay(Random.nextLong(3000, 5000))\n                    position \u003d randomOffset()\n                }\n            }\n        }\n    }\n}\n\n\n@PreviewLightDark\n@Composable\nprivate fun PreviewInstructionsScreen() {\n    MultiplyTheme {\n        InstructionsScreen(onStartGame \u003d {}, navigateUp \u003d {})\n\n    }\n\n}\n\n\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/feat_bubblemode/GameScreen.kt, lines\u003dALL(1-901)\npackage com.stephenwanjala.multiply.game.feat_bubblemode\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.FastOutSlowInEasing\nimport androidx.compose.animation.core.InfiniteTransition\nimport androidx.compose.animation.core.LinearEasing\nimport androidx.compose.animation.core.RepeatMode\nimport androidx.compose.animation.core.animateFloat\nimport androidx.compose.animation.core.infiniteRepeatable\nimport androidx.compose.animation.core.rememberInfiniteTransition\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\nimport androidx.compose.foundation.layout.FlowColumn\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.consumeWindowInsets\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.wrapContentSize\nimport androidx.compose.foundation.layout.wrapContentWidth\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Favorite\nimport androidx.compose.material.icons.filled.FavoriteBorder\nimport androidx.compose.material.icons.filled.Home\nimport androidx.compose.material.icons.filled.Info\nimport androidx.compose.material.icons.filled.Pause\nimport androidx.compose.material.icons.filled.PlayArrow\nimport androidx.compose.material.icons.filled.Refresh\nimport androidx.compose.material.icons.filled.Settings\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.CenterAlignedTopAppBar\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.adaptive.currentWindowSize\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableIntStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.drawBehind\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ImageBitmap\nimport androidx.compose.ui.graphics.Path\nimport androidx.compose.ui.graphics.drawscope.Stroke\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.input.pointer.PointerEventType\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.layout.onSizeChanged\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.platform.LocalFontFamilyResolver\nimport androidx.compose.ui.platform.LocalLayoutDirection\nimport androidx.compose.ui.res.imageResource\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.text.AnnotatedString\nimport androidx.compose.ui.text.TextMeasurer\nimport androidx.compose.ui.text.drawText\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.PreviewScreenSizes\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.IntSize\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Dialog\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport com.stephenwanjala.multiply.R\nimport com.stephenwanjala.multiply.game.components.FloatingSymbols\nimport com.stephenwanjala.multiply.game.components.confettiEffect\nimport com.stephenwanjala.multiply.ui.theme.MultiplyTheme\nimport kotlinx.coroutines.delay\n\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun GameScreen(\n    viewModel: GameViewModel,\n    modifier: Modifier \u003d Modifier,\n    onNavigateUp: () -\u003e Unit,\n    toSettings: () -\u003e Unit,\n    toHowToPlay: () -\u003e Unit,\n    ontoHome: () -\u003e Unit\n) {\n    val screenSize \u003d currentWindowSize()\n    val state \u003d viewModel.state.collectAsStateWithLifecycle().value\n\n    LaunchedEffect(screenSize) {\n        viewModel.updateScreenHeight(screenSize.height.toFloat())\n    }\n    Scaffold(topBar \u003d {\n        CenterAlignedTopAppBar(title \u003d {\n            Text(\n                text \u003d \&quot;${stringResource(R.string.app_name)} ~ ${state.selectedDifficulty.name}\&quot;,\n                style \u003d MaterialTheme.typography.headlineMedium,\n                textAlign \u003d TextAlign.Center,\n                fontWeight \u003d FontWeight.Bold\n            )\n        },\n            navigationIcon \u003d {\n                IconButton(onClick \u003d onNavigateUp) {\n                    Icon(\n                        imageVector \u003d Icons.AutoMirrored.Default.ArrowBack,\n                        contentDescription \u003d \&quot;Navigate Up\&quot;\n                    )\n                }\n            }, actions \u003d {\n                if (state.gameActive) {\n                    IconButton(onClick \u003d {\n                        if (state.isPaused) viewModel.resumeGame()\n                        else viewModel.pauseGame()\n                    }) {\n                        PulsatingPauseIcon(isPaused \u003d state.isPaused)\n                    }\n                }\n                IconButton(onClick \u003d toSettings) {\n                    Icon(imageVector \u003d Icons.Default.Settings, contentDescription \u003d \&quot;Settings\&quot;)\n                }\n                IconButton(onClick \u003d toHowToPlay) {\n                    Icon(imageVector \u003d Icons.Default.Info, contentDescription \u003d \&quot;How To Play\&quot;)\n                }\n            })\n    }) { paddingValues -\u003e\n        Surface(\n            modifier \u003d Modifier\n                .fillMaxSize()\n                .consumeWindowInsets(paddingValues)\n                .padding(paddingValues \u003d paddingValues)\n                .background(\n                    brush \u003d Brush.verticalGradient(\n                        colors \u003d listOf(\n                            Color(0xFF87CEEB),\n                            MaterialTheme.colorScheme.background,\n                            Color(0xFF4682B4)\n                        )\n                    )\n                )\n        ) {\n            Box(\n                modifier \u003d modifier.fillMaxSize(),\n                contentAlignment \u003d Alignment.Center\n            ) {\n\n                if (!state.gameActive) {\n                    AnimatedStartButton(viewModel)\n                } else {\n                    Column(\n                        modifier \u003d Modifier\n                            .fillMaxWidth()\n                            .padding(16.dp),\n                        horizontalAlignment \u003d Alignment.CenterHorizontally\n                    ) {\n                        AnimatedGameHeader(state \u003d state)\n                        Box(\n                            modifier \u003d Modifier\n                                .fillMaxWidth()\n                                .weight(1f)\n                                .padding(bottom \u003d 80.dp)\n                                .onSizeChanged { layoutSize -\u003e\n                                    viewModel.updateGameAreaHeight(layoutSize.height.toFloat())\n                                },\n                            contentAlignment \u003d Alignment.Center\n                        ) {\n                            FloatingSymbols()\n                            if ((state.currentProblem?.position ?: 0f) \u003c\u003d state.safeAreaHeight) {\n                                MathBubble(state \u003d state)\n                            }\n                            androidx.compose.animation.AnimatedVisibility(visible \u003d state.isPaused) {\n                                Box(\n                                    modifier \u003d Modifier\n                                        .fillMaxSize()\n                                        .background(MaterialTheme.colorScheme.primary.copy(alpha \u003d 0.2f))\n                                        .clickable { viewModel.resumeGame() },\n                                    contentAlignment \u003d Alignment.Center\n                                ) {\n                                    // Floating island background\n                                    FloatingIslandPauseMenu(\n                                        onResume \u003d { viewModel.resumeGame() },\n                                        onRestart \u003d { viewModel.reStartGame() },\n                                        onQuit \u003d ontoHome\n                                    )\n\n                                    // Animated sleeping zzz\u0027s\n                                    ZzzAnimation()\n\n                                    // Floating clouds\n                                    ParallaxClouds()\n                                }\n                            }\n                        }\n\n                        AnswerButtons(state \u003d state, submitAnswer \u003d {\n                            viewModel.submitAnswer(it)\n                        })\n                    }\n                }\n\n                // Show game over dialog when needed\n                AnimatedVisibility(\n                    visible \u003d viewModel.showGameOverDialog,\n                    enter \u003d fadeIn(),\n                    exit \u003d fadeOut(animationSpec \u003d tween(durationMillis \u003d 0))\n                ) {\n                    GameOverDialog(\n                        state \u003d state,\n                        startGame \u003d { viewModel.startGame() },\n                        ontoHome \u003d ontoHome,\n                        toSettings \u003d toSettings\n                    )\n                }\n            }\n\n        }\n    }\n\n}\n\n@Composable\nfun PulsatingPauseIcon(isPaused: Boolean) {\n    val infiniteTransition \u003d rememberInfiniteTransition()\n    val alpha by infiniteTransition.animateFloat(\n        initialValue \u003d 0.7f,\n        targetValue \u003d 1f,\n        animationSpec \u003d infiniteRepeatable(\n            animation \u003d tween(1000, easing \u003d LinearEasing),\n            repeatMode \u003d RepeatMode.Reverse\n        )\n    )\n\n    Icon(\n        imageVector \u003d if (isPaused) Icons.Default.PlayArrow else Icons.Default.Pause,\n        contentDescription \u003d if (isPaused) \&quot;Resume\&quot; else \&quot;Pause\&quot;,\n        tint \u003d MaterialTheme.colorScheme.primary.copy(alpha \u003d if (isPaused) alpha else 1f)\n    )\n}\n\n\n@Composable\nfun GameOverDialog(\n    state: GameState,\n    startGame: () -\u003e Unit,\n    toSettings: () -\u003e Unit,\n    ontoHome: () -\u003e Unit\n) {\n    Dialog(\n        onDismissRequest \u003d { /* Dialog cannot be dismissed */ }\n    ) {\n        Box(\n            modifier \u003d Modifier\n                .wrapContentSize()\n                .clip(RoundedCornerShape(16.dp))\n                .background(\n                    brush \u003d Brush.linearGradient(\n                        colors \u003d listOf(MaterialTheme.colorScheme.background, Color(0xFF87CEEB)),\n                    )\n                )\n                .padding(16.dp)\n                .then(if (state.score \u003e 0) Modifier.confettiEffect() else Modifier)\n        ) {\n            Column(\n                modifier \u003d Modifier\n                    .wrapContentSize()\n                    .padding(16.dp),\n                horizontalAlignment \u003d Alignment.CenterHorizontally,\n                verticalArrangement \u003d Arrangement.spacedBy(12.dp)\n            ) {\n                Text(\n                    text \u003d \&quot;Game Over!\&quot;,\n                    style \u003d MaterialTheme.typography.headlineLarge,\n                    fontWeight \u003d FontWeight.Bold,\n                    color \u003d Color.White,\n                    textAlign \u003d TextAlign.Center\n                )\n\n                // Score \u0026 Mascot\n                Column(\n                    horizontalAlignment \u003d Alignment.CenterHorizontally,\n                    verticalArrangement \u003d Arrangement.spacedBy(8.dp)\n                ) {\n                    AnimatedScoreText(score \u003d state.score)\n                    if (state.score \u003e\u003d state.highScore \u0026\u0026 state.score !\u003d 0 \u0026\u0026 state.highScore !\u003d 0) {\n                        NewHighScoreText()\n                    }\n                    Text(\n                        text \u003d \&quot;Game Level :${state.selectedDifficulty.name}\&quot;,\n                        fontWeight \u003d FontWeight.Bold,\n                        style \u003d MaterialTheme.typography.bodyMedium\n                    )\n                    Text(\n                        text \u003d \&quot;Previous Best: ${state.highScore}\&quot;,\n                        style \u003d MaterialTheme.typography.titleMedium,\n                        color \u003d Color.White\n                    )\n                    Image(\n                        painter \u003d painterResource(id \u003d R.drawable.happy_mascot),\n                        contentDescription \u003d \&quot;Happy Mascot\&quot;,\n                        modifier \u003d Modifier.size(100.dp)\n                    )\n                }\n\n                Row(\n                    modifier \u003d Modifier.fillMaxWidth(),\n                    horizontalArrangement \u003d Arrangement.Center\n                ) {\n                    PulsatingButton(\n                        onClick \u003d toSettings,\n                        text \u003d \&quot;Settings\&quot;,\n                    )\n                    Spacer(modifier \u003d Modifier.width(8.dp))\n\n                    PulsatingButton(\n                        onClick \u003d ontoHome,\n                        text \u003d \&quot;Quit\&quot;,\n                    )\n                }\n\n                PulsatingButton(\n                    onClick \u003d startGame,\n                    text \u003d \&quot;Play Again!\&quot;,\n                    icon \u003d Icons.Default.Refresh,\n                    modifier \u003d Modifier\n                        .fillMaxWidth()\n                        .padding(top \u003d 8.dp)\n                )\n            }\n        }\n    }\n}\n\n\n@Composable\nfun AnimatedScoreText(score: Int) {\n    var displayScore by remember { mutableIntStateOf(0) }\n    val key by remember { mutableIntStateOf(0) }\n\n    LaunchedEffect(key) {\n        displayScore \u003d 0\n        delay(500) // Wait for dialog animation\n        while (displayScore \u003c score) {\n            displayScore++\n            delay(50)\n        }\n    }\n\n    Text(\n        text \u003d \&quot;Final Score: $displayScore\&quot;,\n        style \u003d MaterialTheme.typography.headlineMedium,\n        fontWeight \u003d FontWeight.Bold,\n        color \u003d Color.Yellow,\n        textAlign \u003d TextAlign.Center\n    )\n}\n\n@Composable\nfun NewHighScoreText() {\n    val infiniteTransition \u003d rememberInfiniteTransition()\n    val scale by infiniteTransition.animateFloat(\n        initialValue \u003d 1f,\n        targetValue \u003d 1.2f,\n        animationSpec \u003d infiniteRepeatable(\n            animation \u003d tween(500, easing \u003d FastOutSlowInEasing),\n            repeatMode \u003d RepeatMode.Reverse\n        )\n    )\n\n    Text(\n        text \u003d \&quot; New High Score! \&quot;,\n        color \u003d Color(0xFFFFA500),\n        fontWeight \u003d FontWeight.Bold,\n        style \u003d MaterialTheme.typography.titleLarge,\n        modifier \u003d Modifier.scale(scale)\n    )\n}\n\n@Composable\nfun PulsatingButton(\n    modifier: Modifier \u003d Modifier,\n    onClick: () -\u003e Unit,\n    icon: ImageVector? \u003d null,\n    text: String\n) {\n    val infiniteTransition \u003d rememberInfiniteTransition()\n    val scale by infiniteTransition.animateFloat(\n        initialValue \u003d 1f,\n        targetValue \u003d 1.1f,\n        animationSpec \u003d infiniteRepeatable(\n            animation \u003d tween(1000, easing \u003d FastOutSlowInEasing),\n            repeatMode \u003d RepeatMode.Reverse\n        )\n    )\n\n    Button(\n        onClick \u003d onClick,\n        modifier \u003d modifier\n            .graphicsLayer {\n                scaleX \u003d scale\n                scaleY \u003d scale\n            },\n        shape \u003d MaterialTheme.shapes.medium,\n        colors \u003d ButtonDefaults.buttonColors(containerColor \u003d Color(0xFF32CD32))\n    ) {\n        Row(\n            modifier \u003d Modifier.wrapContentWidth(),\n            verticalAlignment \u003d Alignment.CenterVertically,\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp)\n        ) {\n            if (icon !\u003d null) {\n                Icon(\n                    imageVector \u003d icon,\n                    contentDescription \u003d text,\n                )\n            }\n            Text(\n                text \u003d text,\n                style \u003d MaterialTheme.typography.titleMedium,\n                fontWeight \u003d FontWeight.Bold,\n                color \u003d Color.White\n            )\n        }\n    }\n}\n\n\n@Composable\nfun AnimatedGameHeader(state: GameState) {\n    Row(\n        modifier \u003d Modifier\n            .fillMaxWidth()\n            .padding(bottom \u003d 16.dp),\n        horizontalArrangement \u003d Arrangement.SpaceBetween,\n        verticalAlignment \u003d Alignment.CenterVertically\n    ) {\n        ScoreDisplay(score \u003d state.score, title \u003d \&quot;Score\&quot;)\n        LivesDisplay(lives \u003d state.lives)\n        ScoreDisplay(score \u003d state.highScore, title \u003d \&quot;High Score\&quot;)\n    }\n}\n\n@Composable\nfun ScoreDisplay(score: Int, title: String) {\n    Column(horizontalAlignment \u003d Alignment.CenterHorizontally) {\n        Text(\n            text \u003d title,\n            style \u003d MaterialTheme.typography.labelMedium,\n        )\n        Text(\n            text \u003d score.toString(),\n            style \u003d MaterialTheme.typography.headlineMedium,\n            fontWeight \u003d FontWeight.Bold,\n        )\n    }\n}\n\n@Composable\nfun LivesDisplay(lives: Int) {\n    Row {\n        repeat(3) { index -\u003e\n            val isActive \u003d index \u003c lives\n            Icon(\n                imageVector \u003d if (isActive) Icons.Default.Favorite else Icons.Default.FavoriteBorder,\n                contentDescription \u003d \&quot;Life\&quot;,\n                tint \u003d if (isActive) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.primary.copy(\n                    alpha \u003d 0.3f\n                ),\n                modifier \u003d Modifier\n                    .size(32.dp)\n                    .scale(if (isActive) 1.2f else 1f)\n                    .padding(horizontal \u003d 2.dp)\n            )\n        }\n    }\n}\n\n\n@Composable\nprivate fun AnswerButtons(state: GameState, submitAnswer: (choice: Int) -\u003e Unit) {\n    Column(\n        modifier \u003d Modifier\n            .fillMaxWidth()\n            .padding(16.dp)\n    ) {\n        state.currentProblem?.choices?.chunked(2)?.forEach { rowChoices -\u003e\n            Row(\n                modifier \u003d Modifier.fillMaxWidth(),\n                horizontalArrangement \u003d Arrangement.spacedBy(8.dp)\n            ) {\n                rowChoices.forEach { choice -\u003e\n                    Button(\n                        onClick \u003d { submitAnswer(choice) },\n                        modifier \u003d Modifier\n                            .weight(1f)\n                            .height(56.dp),\n                        enabled \u003d !state.isPaused,\n                        shape \u003d MaterialTheme.shapes.medium\n                    ) {\n                        Text(\n                            text \u003d choice.toString(),\n                            fontSize \u003d 24.sp,\n                            fontWeight \u003d FontWeight.Bold\n                        )\n                    }\n                }\n            }\n            Spacer(modifier \u003d Modifier.height(8.dp))\n        }\n    }\n}\n\n\n@Composable\nfun AnimatedStartButton(viewModel: GameViewModel) {\n    val infiniteTransition \u003d rememberInfiniteTransition()\n    val scale by infiniteTransition.animateFloat(\n        initialValue \u003d 1f,\n        targetValue \u003d 1.1f,\n        animationSpec \u003d infiniteRepeatable(\n            animation \u003d tween(1000, easing \u003d FastOutSlowInEasing),\n            repeatMode \u003d RepeatMode.Reverse\n        )\n    )\n\n    Button(\n        onClick \u003d { viewModel.startGame() },\n        modifier \u003d Modifier\n            .scale(scale)\n            .padding(16.dp),\n        shape \u003d MaterialTheme.shapes.medium\n//        colors \u003d ButtonDefaults.buttonColors(containerColor \u003d Color(0xFFFFA500))\n    ) {\n        Text(\n            \&quot;Start Game\&quot;,\n            fontSize \u003d 24.sp,\n            fontWeight \u003d FontWeight.Bold,\n            color \u003d Color.White\n        )\n    }\n}\n\n\n@Composable\nfun MathBubble(state: GameState) {\n    state.currentProblem?.let { problem -\u003e\n        val transition \u003d rememberInfiniteTransition(label \u003d \&quot;gradientTransition\&quot;)\n        val totalTime \u003d 1f / state.gameSpeed  // Calculate total time based on game speed\n\n        val elapsed \u003d (System.currentTimeMillis() - problem.startTime) / 1000f\n        val progress \u003d (1f - (elapsed / totalTime)).coerceIn(0f, 1f)\n\n        // Pulse animation for time remaining\n        val pulseAlpha by transition.animateFloat(\n            initialValue \u003d 0.3f,\n            targetValue \u003d 1f,\n            animationSpec \u003d infiniteRepeatable(\n                animation \u003d tween(500, easing \u003d LinearEasing),\n                repeatMode \u003d RepeatMode.Reverse\n            ),\n            label \u003d \&quot;pulseAlpha\&quot;\n        )\n\n        Box(\n            modifier \u003d Modifier\n                .size(210.dp)\n                .offset { IntOffset(0, problem.position.toInt()) },\n            contentAlignment \u003d Alignment.Center\n        ) {\n            val fontResolver \u003d LocalFontFamilyResolver.current\n            val density \u003d LocalDensity.current\n            val layoutDirection \u003d LocalLayoutDirection.current\n            val textMeasurer \u003d TextMeasurer(\n                defaultDensity \u003d density,\n                defaultFontFamilyResolver \u003d fontResolver,\n                defaultLayoutDirection \u003d layoutDirection\n            )\n            val pulseColor \u003d MaterialTheme.colorScheme.error.copy(alpha \u003d pulseAlpha)\n            val circleColor \u003d MaterialTheme.colorScheme.primaryContainer\n            val equationTextStyle \u003d MaterialTheme.typography.displayMedium.copy(\n                color \u003d MaterialTheme.colorScheme.onPrimaryContainer,\n                fontWeight \u003d FontWeight.Bold\n            )\n            val textLayoutResult \u003d textMeasurer.measure(\n                text \u003d AnnotatedString(\&quot;${problem.num1} X ${problem.num2}\&quot;),\n                style \u003d MaterialTheme.typography.displayMedium,\n\n                )\n            Canvas(modifier \u003d Modifier.fillMaxSize()) {\n                val circleRadius \u003d size.width / 2\n                val circleCenter \u003d Offset(circleRadius, circleRadius)\n\n                // Draw background bubble\n                drawCircle(\n                    color \u003d circleColor,\n                    center \u003d circleCenter,\n                    radius \u003d circleRadius\n                )\n\n                // Draw time remaining pulse\n                drawCircle(\n                    color \u003d pulseColor,\n                    center \u003d circleCenter,\n                    radius \u003d circleRadius * progress,\n                    style \u003d Stroke(width \u003d 4.dp.toPx())\n                )\n\n                // Draw equation text\n                drawText(\n                    textMeasurer \u003d textMeasurer,\n                    text \u003d \&quot;${problem.num1} × ${problem.num2}\&quot;,\n                    style \u003d equationTextStyle,\n                    topLeft \u003d Offset(\n                        circleCenter.x - textLayoutResult.size.width / 2,\n                        circleCenter.y - textLayoutResult.size.height / 2\n                    )\n                )\n            }\n        }\n    }\n}\n\n@OptIn(ExperimentalLayoutApi::class)\n@Composable\nprivate fun FloatingIslandPauseMenu(\n    onResume: () -\u003e Unit,\n    onRestart: () -\u003e Unit,\n    onQuit: () -\u003e Unit\n) {\n    val infiniteTransition \u003d rememberInfiniteTransition()\n    val floatOffset by infiniteTransition.animateFloat(\n        initialValue \u003d -10f,\n        targetValue \u003d 10f,\n        animationSpec \u003d infiniteRepeatable(\n            animation \u003d tween(2000, easing \u003d LinearEasing),\n            repeatMode \u003d RepeatMode.Reverse\n        )\n    )\n    val imageBitmap \u003d ImageBitmap.imageResource(R.drawable.sleeping_mascot)\n\n    Column(\n        modifier \u003d Modifier\n            .fillMaxSize()\n            .graphicsLayer {\n                rotationZ \u003d floatOffset * 0.2f\n                translationY \u003d floatOffset\n            }\n            .drawBehind {\n//                Island\n                drawPath(\n                    path \u003d Path().apply {\n                        moveTo(0f, size.height)\n                        quadraticTo(size.width / 2, size.height - 150f, size.width, size.height)\n                    },\n                    color \u003d Color(0xFF4CAF50)\n                )\n\n                // Draw sleeping mascot\n                drawImage(\n                    image \u003d imageBitmap,\n                    dstSize \u003d IntSize(150, 150),\n                    dstOffset \u003d IntOffset(size.width.toInt() / 2 - 75, 50)\n                )\n            },\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Spacer(Modifier.weight(1f))\n        // Pause menu buttons\n        FlowColumn(\n            modifier \u003d Modifier\n                .wrapContentSize(),\n//                .background(Color.Blue.copy(alpha \u003d 0.2f)), // For Debugging TF background color\n            verticalArrangement \u003d Arrangement.spacedBy(8.dp)\n        ) {\n            HoverButton(\n                text \u003d \&quot;Keep Playing\&quot;,\n                icon \u003d Icons.Default.PlayArrow,\n                onClick \u003d onResume\n            )\n\n            HoverButton(\n                text \u003d \&quot;Start Fresh\&quot;,\n                icon \u003d Icons.Default.Refresh,\n                onClick \u003d onRestart\n            )\n\n            HoverButton(\n                text \u003d \&quot;Quit to Home\&quot;,\n                icon \u003d Icons.Default.Home,\n                onClick \u003d onQuit\n            )\n        }\n        Spacer(Modifier.weight(1f))\n    }\n}\n\n@Composable\nprivate fun ZzzAnimation() {\n    val symbols \u003d listOf(\&quot;\&quot;, \&quot;\&quot;, \&quot;✨\&quot;, \&quot;⏸️\&quot;)\n    val infiniteTransition \u003d rememberInfiniteTransition()\n\n    repeat(8) { index -\u003e\n        val xOffset by infiniteTransition.animateFloat(\n            initialValue \u003d -50f,\n            targetValue \u003d 50f,\n            animationSpec \u003d infiniteRepeatable(\n                animation \u003d tween(3000 + index * 500, easing \u003d LinearEasing),\n                repeatMode \u003d RepeatMode.Reverse\n            )\n        )\n\n        val yOffset by infiniteTransition.animateFloat(\n            initialValue \u003d 0f,\n            targetValue \u003d -100f,\n            animationSpec \u003d infiniteRepeatable(\n                animation \u003d tween(2500 + index * 500, easing \u003d FastOutSlowInEasing),\n                repeatMode \u003d RepeatMode.Reverse\n            )\n        )\n\n        val alpha by infiniteTransition.animateFloat(\n            initialValue \u003d 0.8f,\n            targetValue \u003d 0f,\n            animationSpec \u003d infiniteRepeatable(\n                animation \u003d tween(3000, easing \u003d LinearEasing),\n                repeatMode \u003d RepeatMode.Restart\n            )\n        )\n\n        Text(\n            text \u003d symbols[index % symbols.size],\n            modifier \u003d Modifier\n//                .offset(xOffset.dp, yOffset.dp)\n                .graphicsLayer {\n                    translationX \u003d xOffset\n                    translationY \u003d yOffset\n                    this.alpha \u003d this.translationX\n                },\n            fontSize \u003d 24.sp,\n            color \u003d Color.White.copy(alpha \u003d alpha)\n        )\n    }\n}\n\n@Composable\nprivate fun ParallaxClouds() {\n    val infiniteTransition \u003d rememberInfiniteTransition()\n\n    // Back layer clouds\n    CloudLayer(\n        speedMultiplier \u003d 0.5f,\n        scale \u003d 0.8f,\n        alpha \u003d 0.4f,\n        infiniteTransition \u003d infiniteTransition\n    )\n\n    // Front layer clouds\n    CloudLayer(\n        speedMultiplier \u003d 1.2f,\n        scale \u003d 1f,\n        alpha \u003d 0.7f,\n        infiniteTransition \u003d infiniteTransition\n    )\n}\n\n@Composable\nprivate fun CloudLayer(\n    speedMultiplier: Float,\n    scale: Float,\n    alpha: Float,\n    infiniteTransition: InfiniteTransition\n) {\n    repeat(5) { index -\u003e\n        val xOffset by infiniteTransition.animateFloat(\n            initialValue \u003d -200f,\n            targetValue \u003d 200f,\n            animationSpec \u003d infiniteRepeatable(\n                animation \u003d tween((3000 / speedMultiplier).toInt(), easing \u003d LinearEasing),\n                repeatMode \u003d RepeatMode.Reverse\n            )\n        )\n\n        Image(\n            painter \u003d painterResource(R.drawable.ic_cloud),\n            contentDescription \u003d null,\n            modifier \u003d Modifier\n                .scale(scale)\n                .graphicsLayer {\n                    this.alpha \u003d alpha\n                    translationX \u003d xOffset * (index + 1)\n                }\n                .offset(y \u003d (index * 50).dp)\n        )\n    }\n}\n\n@Composable\nfun HoverButton(\n    text: String,\n    icon: ImageVector,\n    onClick: () -\u003e Unit\n) {\n    var isHovered by remember { mutableStateOf(false) }\n    val infiniteTransition \u003d rememberInfiniteTransition()\n    val scale by infiniteTransition.animateFloat(\n        initialValue \u003d 0.98f,\n        targetValue \u003d 1.02f,\n        animationSpec \u003d infiniteRepeatable(\n            animation \u003d tween(1000, easing \u003d FastOutSlowInEasing),\n            repeatMode \u003d RepeatMode.Reverse\n        )\n    )\n\n    Button(\n        onClick \u003d onClick,\n        modifier \u003d Modifier\n            .graphicsLayer {\n                scaleX \u003d if (isHovered) 1.1f else scale\n                scaleY \u003d if (isHovered) 1.1f else scale\n            }\n            .pointerInput(Unit) {\n                awaitPointerEventScope {\n                    while (true) {\n                        val event \u003d awaitPointerEvent()\n\n                        when (event.type) {\n                            PointerEventType.Enter -\u003e {\n                                isHovered \u003d true\n                            }\n\n                            PointerEventType.Exit -\u003e {\n                                isHovered \u003d false\n                            }\n                        }\n                    }\n                }\n            },\n        colors \u003d ButtonDefaults.buttonColors(\n            containerColor \u003d Color(0xFFFFD700),\n            contentColor \u003d Color.Black\n        ),\n        elevation \u003d ButtonDefaults.buttonElevation(\n            defaultElevation \u003d 4.dp,\n            pressedElevation \u003d 8.dp\n        )\n    ) {\n        Row(verticalAlignment \u003d Alignment.CenterVertically) {\n            Icon(\n                imageVector \u003d icon,\n                contentDescription \u003d text,\n                modifier \u003d Modifier.size(24.dp)\n            )\n            Spacer(modifier \u003d Modifier.width(8.dp))\n            Text(text \u003d text, fontWeight \u003d FontWeight.Bold)\n        }\n    }\n}\n\n@PreviewScreenSizes\n@Composable\nprivate fun GameOverDialogPreview() {\n    MultiplyTheme {\n        GameOverDialog(state \u003d GameState(), toSettings \u003d {}, ontoHome \u003d {}, startGame \u003d {})\n    }\n}\n\n\n@PreviewScreenSizes\n@Composable\nprivate fun PreviewFloatingIslandPauseMenu() {\n    MultiplyTheme {\n        FloatingIslandPauseMenu(onQuit \u003d {}, onResume \u003d {}, onRestart \u003d {})\n    }\n}\n\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/feat_bubblemode/GameViewModel.kt, lines\u003dALL(1-359)\npackage com.stephenwanjala.multiply.game.feat_bubblemode\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.datastore.core.DataStore\nimport androidx.datastore.preferences.core.Preferences\nimport androidx.datastore.preferences.core.edit\nimport androidx.datastore.preferences.core.intPreferencesKey\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.stateIn\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport javax.inject.Inject\nimport kotlin.random.Random\n\n@HiltViewModel\nclass GameViewModel @Inject constructor(\n    private val dataStore: DataStore\u003cPreferences\u003e\n) : ViewModel() {\n\n    private val _state \u003d MutableStateFlow(GameState())\n    val state \u003d _state.stateIn(\n        viewModelScope,\n        SharingStarted.WhileSubscribed(5000),\n        _state.value\n    )\n\n    private var gameJob: Job? \u003d null\n    var showGameOverDialog by mutableStateOf(false)\n        private set\n\n    fun onAction(action: GameAction){\n        when(action){\n            GameAction.ResetGameSettings -\u003e {\n\n            }\n            is GameAction.UpdateDifficulty -\u003e {\n                setDifficulty(action.difficulty)\n            }\n        }\n    }\n\n    init {\n        viewModelScope.launch {\n            dataStore.data.collect { preferences -\u003e\n                val savedDifficulty \u003d preferences[DIFFICULTY_KEY]?.let { Difficulty.entries[it] } ?: Difficulty.EASY\n                val score \u003dpreferences[HIGH_SCORE_KEY] ?: 0\n                _state.update { it.copy(selectedDifficulty \u003d savedDifficulty, highScore \u003d score) }\n\n            }\n        }\n    }\n\n    private fun setDifficulty(difficulty: Difficulty) {\n        _state.update { it.copy(selectedDifficulty \u003d difficulty) }\n        viewModelScope.launch {\n            dataStore.edit { prefs -\u003e\n                prefs[DIFFICULTY_KEY] \u003d difficulty.ordinal\n            }\n        }\n    }\n\n    private suspend fun updateHighScore(newScore: Int) {\n        if (newScore \u003e _state.value.highScore) {\n            dataStore.edit { preferences -\u003e\n                preferences[HIGH_SCORE_KEY] \u003d newScore\n            }\n            _state.update { it.copy(highScore \u003d newScore) }\n        }\n    }\n\n    fun startGame() {\n        if (gameJob?.isActive \u003d\u003d true) return\n\n        showGameOverDialog \u003d false\n        gameJob?.cancel()\n        val speed \u003d when (_state.value.selectedDifficulty) {\n            Difficulty.EASY -\u003e 0.15f\n            Difficulty.MEDIUM -\u003e 0.2f\n            Difficulty.HARD -\u003e 0.21f\n        }\n\n        _state.update {\n            it.copy(\n                gameActive \u003d true,\n                score \u003d 0,\n                lives \u003d 3,\n                problemCounter \u003d 0,\n                currentProblem \u003d null,\n                isPaused \u003d false,\n                pauseStartTime \u003d 0L,\n                gameSpeed \u003d speed\n            )\n        }\n\n        gameJob \u003d viewModelScope.launch {\n            while (_state.value.gameActive) {\n                if (!_state.value.isPaused) {\n                    if (_state.value.currentProblem \u003d\u003d null) {\n                        generateNewProblem()\n                    }\n                    updateProblemPosition()\n                }\n                delay(16)\n            }\n        }\n    }\n\n    private fun generateNewProblem() {\n        val difficulty \u003d _state.value.selectedDifficulty\n        val (min, max) \u003d when (difficulty) {\n            Difficulty.EASY -\u003e Pair(1, 9)\n            Difficulty.MEDIUM -\u003e Pair(1, 12)\n            Difficulty.HARD -\u003e Pair(1, 15)\n        }\n        val num1 \u003d Random.nextInt(min, max + 1)\n        val num2 \u003d Random.nextInt(min, max + 1)\n        val answer \u003d num1 * num2\n        val choices \u003d generateChoices(answer)\n\n        _state.update { state -\u003e\n            val newCounter \u003d state.problemCounter + 1\n            state.copy(\n                problemCounter \u003d newCounter,\n                currentProblem \u003d Problem(\n                    id \u003d newCounter,\n                    num1 \u003d num1,\n                    num2 \u003d num2,\n                    answer \u003d answer,\n                    choices \u003d choices,\n                    startTime \u003d System.currentTimeMillis()\n                )\n            )\n        }\n    }\n\n    private fun generateChoices(correctAnswer: Int): List\u003cInt\u003e {\n        val difficulty \u003d _state.value.selectedDifficulty\n        val choices \u003d mutableSetOf(correctAnswer)\n        while (choices.size \u003c 4) {\n            val wrongAnswer \u003d when (difficulty) {\n                Difficulty.EASY -\u003e generateEasyAnswer(correctAnswer)\n                Difficulty.MEDIUM -\u003e generateMediumAnswer(correctAnswer)\n                Difficulty.HARD -\u003e generateHardAnswer(correctAnswer)\n            }\n            if (wrongAnswer \u003e 0) choices.add(wrongAnswer)\n        }\n        return choices.shuffled()\n    }\n\n    private fun generateEasyAnswer(correct: Int): Int {\n        return when (Random.nextInt(3)) {\n            0 -\u003e correct + Random.nextInt(1, 5)\n            1 -\u003e correct - Random.nextInt(1, 5)\n            else -\u003e Random.nextInt(1, 101)\n        }\n    }\n\n    private fun generateMediumAnswer(correct: Int): Int {\n        return when (Random.nextInt(3)) {\n            0 -\u003e correct + Random.nextInt(1, 4)\n            1 -\u003e correct - Random.nextInt(1, 4)\n            else -\u003e Random.nextInt(maxOf(1, correct - 5), correct + 6)\n        }\n    }\n\n    private fun generateHardAnswer(correct: Int): Int {\n        return when (Random.nextInt(3)) {\n            0 -\u003e correct + 1\n            1 -\u003e correct - 1\n            else -\u003e (correct + listOf(-2, 2).random()).coerceAtLeast(1)\n        }\n    }\n\n    fun updateGameAreaHeight(height: Float) {\n        _state.update {\n            it.copy(\n                screenHeight \u003d height,\n                gameAreaHeight \u003d height - 40,\n                safeAreaHeight \u003d height * 0.8f - 300\n            )\n        }\n    }\n\n    private fun updateProblemPosition() {\n        val currentState \u003d _state.value\n        currentState.currentProblem?.let { problem -\u003e\n            val elapsed \u003d (System.currentTimeMillis() - problem.startTime) / 1000f\n            val newPosition \u003d elapsed * currentState.gameSpeed * currentState.gameAreaHeight\n\n            if (newPosition \u003e\u003d currentState.safeAreaHeight) {\n                handleMissedProblem()\n            } else {\n                _state.update {\n                    it.copy(currentProblem \u003d problem.copy(position \u003d newPosition))\n                }\n            }\n        }\n    }\n\n    private fun handleMissedProblem() {\n        _state.update { it.copy(lives \u003d it.lives - 1) }\n\n        if (_state.value.lives \u003c\u003d 0) {\n            endGame()\n        } else {\n            _state.update { it.copy(currentProblem \u003d null) }\n        }\n    }\n\n    private fun endGame() {\n        _state.update {\n            it.copy(\n                gameActive \u003d false,\n                isPaused \u003d false,\n                pauseStartTime \u003d 0L\n            )\n        }\n        gameJob?.cancel()\n        showGameOverDialog \u003d true\n        viewModelScope.launch {\n            updateHighScore(_state.value.score)\n        }\n    }\n\n    fun submitAnswer(selectedAnswer: Int) {\n        if (!_state.value.gameActive || _state.value.isPaused) return\n        _state.value.currentProblem?.let { problem -\u003e\n            if (selectedAnswer \u003d\u003d problem.answer) {\n                _state.update {\n                    it.copy(\n                        score \u003d it.score + 1,\n                        currentProblem \u003d null\n                    )\n                }\n            } else {\n                _state.update {\n                    it.copy(\n                        lives \u003d it.lives - 1,\n                        currentProblem \u003d null\n                    )\n                }\n                if (_state.value.lives \u003c\u003d 0) {\n                    endGame()\n                }\n            }\n        }\n    }\n\n    fun updateScreenHeight(height: Float) {\n        _state.update {\n            it.copy(\n                screenHeight \u003d height,\n                gameAreaHeight \u003d height - 200,\n                safeAreaHeight \u003d height * 0.8f - 300\n            )\n        }\n    }\n\n    fun pauseGame() {\n        if (!_state.value.gameActive || _state.value.isPaused) return\n        _state.update {\n            it.copy(\n                isPaused \u003d true,\n                pauseStartTime \u003d System.currentTimeMillis()\n            )\n        }\n    }\n\n    fun resumeGame() {\n        if (!_state.value.gameActive || !_state.value.isPaused) return\n        val pauseDuration \u003d System.currentTimeMillis() - _state.value.pauseStartTime\n        _state.update { state -\u003e\n            val updatedProblem \u003d state.currentProblem?.let { problem -\u003e\n                problem.copy(startTime \u003d problem.startTime + pauseDuration)\n            }\n            state.copy(\n                isPaused \u003d false,\n                pauseStartTime \u003d 0L,\n                currentProblem \u003d updatedProblem\n            )\n        }\n    }\n    /*\n    Ensure any running game loop is stopped\n     Stop current game\n     Reset game speed\n     Start a new game with fresh parameters\n     */\n\n    fun reStartGame() {\n        gameJob?.cancel()\n\n        _state.update {\n            it.copy(\n                gameActive \u003d false,\n                score \u003d 0,\n                lives \u003d 3,\n                problemCounter \u003d 0,\n                currentProblem \u003d null,\n                isPaused \u003d false,\n                pauseStartTime \u003d 0L\n            )\n        }\n        startGame()\n    }\n\n\n\n\n    companion object {\n        private val HIGH_SCORE_KEY \u003d intPreferencesKey(\&quot;high_score\&quot;)\n        private val DIFFICULTY_KEY \u003d intPreferencesKey(\&quot;difficulty\&quot;)\n    }\n}\n\n\ndata class GameState(\n    val currentProblem: Problem? \u003d null,\n    val score: Int \u003d 0,\n    val lives: Int \u003d 3,\n    val gameActive: Boolean \u003d false,\n    val screenHeight: Float \u003d 0f,\n    val gameAreaHeight: Float \u003d 0f,\n    val safeAreaHeight: Float \u003d 80f,\n    val problemCounter: Int \u003d 0,\n    val highScore: Int \u003d 0,\n    val gameSpeed: Float \u003d 0f,\n    val isPaused: Boolean \u003d false,\n    val pauseStartTime: Long \u003d 0L,\n    val selectedDifficulty: Difficulty \u003d Difficulty.EASY\n)\n\ndata class Problem(\n    val id: Int,\n    val num1: Int,\n    val num2: Int,\n    val answer: Int,\n    val choices: List\u003cInt\u003e,\n    val startTime: Long,\n    val position: Float \u003d 0f\n)\n\nenum class Difficulty {\n    EASY, MEDIUM, HARD\n}\n\n\nsealed interface GameAction{\n    data object ResetGameSettings: GameAction\n    data class UpdateDifficulty(val difficulty: Difficulty): GameAction\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/feat_bubblemode/SettingsScreen.kt, lines\u003dALL(1-200)\npackage com.stephenwanjala.multiply.game.feat_bubblemode\n\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.spring\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.*\nimport androidx.compose.material3.adaptive.currentWindowAdaptiveInfo\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.tooling.preview.PreviewLightDark\nimport androidx.compose.ui.tooling.preview.PreviewScreenSizes\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.window.core.layout.WindowWidthSizeClass\nimport com.stephenwanjala.multiply.ui.theme.MultiplyTheme\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun SettingsScreen(onBackClick: () -\u003e Unit, state: GameState, onAction: (GameAction) -\u003e Unit) {\n    var soundEnabled by remember { mutableStateOf(true) }\n    var musicEnabled by remember { mutableStateOf(true) }\n    var selectedTheme by remember { mutableStateOf(\&quot;Space\&quot;) }\n\n    val uiDiff \u003d state.selectedDifficulty.toInt()\n    val scrollState \u003d rememberScrollState()\n    val adaptiveInfo \u003d currentWindowAdaptiveInfo()\n\n    Scaffold(\n        modifier \u003d Modifier.fillMaxSize(),\n        topBar \u003d {\n            TopAppBar(title \u003d { Text(\&quot;Game Settings\&quot;, fontWeight \u003d FontWeight.Bold) },\n                navigationIcon \u003d {\n                    IconButton(onClick \u003d onBackClick) {\n                        Icon(Icons.AutoMirrored.Default.ArrowBack, contentDescription \u003d \&quot;Back\&quot;)\n                    }\n                })\n        }\n    ) { paddingValues -\u003e\n        Surface(\n            modifier \u003d Modifier\n                .fillMaxSize()\n                .background(\n                    Brush.linearGradient(\n                        colors \u003d listOf(\n                            Color(0xFFE1F5FE),\n                            MaterialTheme.colorScheme.background\n                        )\n                    )\n                )\n        ) {\n            Column(\n                modifier \u003d Modifier\n                    .fillMaxSize()\n                    .padding(paddingValues)\n                    .verticalScroll(scrollState)\n                    .padding(16.dp),\n                horizontalAlignment \u003d Alignment.CenterHorizontally\n            ) {\n                if (adaptiveInfo.windowSizeClass.windowWidthSizeClass \u003d\u003d WindowWidthSizeClass.COMPACT) {\n                    SettingsCategory(\&quot;Gameplay\&quot;) {\n                        DifficultySelector(uiDiff) { onAction(GameAction.UpdateDifficulty(it.toDifficulty())) }\n                    }\n                    SettingsCategory(\&quot;Audio\&quot;) {\n                        SoundToggle(\&quot;Sound Effects\&quot;, soundEnabled) { soundEnabled \u003d it }\n                        SoundToggle(\&quot;Background Music\&quot;, musicEnabled) { musicEnabled \u003d it }\n                    }\n                    SettingsCategory(\&quot;Appearance\&quot;) {\n                        ThemeSelector(selectedTheme) { selectedTheme \u003d it }\n                    }\n                } else {\n                    Row(horizontalArrangement \u003d Arrangement.spacedBy(8.dp), modifier \u003d Modifier.fillMaxWidth()) {\n                        SettingsCategory(\&quot;Gameplay\&quot;, Modifier.weight(1f)) {\n                            DifficultySelector(uiDiff) { onAction(GameAction.UpdateDifficulty(it.toDifficulty())) }\n                        }\n                        SettingsCategory(\&quot;Audio\&quot;, Modifier.weight(1f)) {\n                            SoundToggle(\&quot;Sound Effects\&quot;, soundEnabled) { soundEnabled \u003d it }\n                            SoundToggle(\&quot;Background Music\&quot;, musicEnabled) { musicEnabled \u003d it }\n                        }\n                    }\n                    SettingsCategory(\&quot;Appearance\&quot;, Modifier.fillMaxWidth()) {\n                        ThemeSelector(selectedTheme) { selectedTheme \u003d it }\n                    }\n                }\n\n                Spacer(modifier \u003d Modifier.height(24.dp))\n                Button(onClick \u003d { /* Reset settings */ }, colors \u003d ButtonDefaults.buttonColors(containerColor \u003d Color(0xFFFFA000))) {\n                    Icon(Icons.Default.Refresh, contentDescription \u003d \&quot;Reset\&quot;)\n                    Spacer(modifier \u003d Modifier.width(8.dp))\n                    Text(\&quot;Reset to Default\&quot;, fontSize \u003d 18.sp)\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun SettingsCategory(title: String, modifier: Modifier \u003d Modifier, content: @Composable () -\u003e Unit) {\n    Card(modifier \u003d modifier\n        .fillMaxWidth()\n        .padding(vertical \u003d 8.dp), elevation \u003d CardDefaults.cardElevation(defaultElevation \u003d 4.dp)) {\n        Column(modifier \u003d Modifier.padding(16.dp)) {\n            Text(title, fontWeight \u003d FontWeight.Bold, color \u003d Color(0xFF3F51B5), modifier \u003d Modifier.padding(bottom \u003d 16.dp))\n            content()\n        }\n    }\n}\n\n@Composable\nfun DifficultySelector(difficulty: Int, onDifficultyChange: (Int) -\u003e Unit) {\n    Column {\n        Text(\&quot;Difficulty Level\&quot;)\n        Slider(value \u003d difficulty.toFloat(), onValueChange \u003d { onDifficultyChange(it.toInt()) }, valueRange \u003d 1f..3f, steps \u003d 1, modifier \u003d Modifier.padding(vertical \u003d 8.dp))\n        Row(modifier \u003d Modifier.fillMaxWidth(), horizontalArrangement \u003d Arrangement.SpaceBetween) {\n            Text(\&quot;Easy\&quot;)\n            Text(\&quot;Medium\&quot;)\n            Text(\&quot;Hard\&quot;)\n        }\n    }\n}\n\n@Composable\nfun SoundToggle(title: String, isEnabled: Boolean, onToggle: (Boolean) -\u003e Unit) {\n    Row(modifier \u003d Modifier\n        .fillMaxWidth()\n        .padding(vertical \u003d 8.dp), verticalAlignment \u003d Alignment.CenterVertically) {\n        Text(title, modifier \u003d Modifier.weight(1f))\n        Switch(checked \u003d isEnabled, onCheckedChange \u003d onToggle, colors \u003d SwitchDefaults.colors(checkedThumbColor \u003d Color(0xFF4CAF50), checkedTrackColor \u003d Color(0xFF81C784)))\n    }\n}\n\n@Composable\nfun ThemeSelector(selectedTheme: String, onThemeSelect: (String) -\u003e Unit) {\n    val themes \u003d listOf(\&quot;Space\&quot;, \&quot;Jungle\&quot;, \&quot;Ocean\&quot;, \&quot;Candy\&quot;)\n    Column {\n        Text(\&quot;Game Theme\&quot;, modifier \u003d Modifier.padding(bottom \u003d 8.dp))\n        Row(modifier \u003d Modifier.fillMaxWidth(), horizontalArrangement \u003d Arrangement.spacedBy(8.dp), verticalAlignment \u003d Alignment.CenterVertically) {\n            themes.forEach { theme -\u003e\n                ThemeButton(theme, theme \u003d\u003d selectedTheme) { onThemeSelect(theme) }\n            }\n        }\n    }\n}\n\n@Composable\nfun ThemeButton(theme: String, isSelected: Boolean, onSelect: () -\u003e Unit) {\n    val color \u003d when (theme) {\n        \&quot;Space\&quot; -\u003e Color(0xFF3F51B5)\n        \&quot;Jungle\&quot; -\u003e Color(0xFF4CAF50)\n        \&quot;Ocean\&quot; -\u003e Color(0xFF03A9F4)\n        \&quot;Candy\&quot; -\u003e Color(0xFFE91E63)\n        else -\u003e Color.Gray\n    }\n    val scale by animateFloatAsState(if (isSelected) 1.1f else 1f, animationSpec \u003d spring(dampingRatio \u003d Spring.DampingRatioMediumBouncy))\n    Box(modifier \u003d Modifier\n        .size(60.dp)\n        .clip(MaterialTheme.shapes.medium)\n        .background(if (isSelected) color else color.copy(alpha \u003d 0.6f))\n        .animateContentSize()\n        .scale(scale)) {\n        IconButton(onClick \u003d onSelect) {\n            Icon(Icons.Default.Palette, contentDescription \u003d theme, tint \u003d Color.White)\n        }\n    }\n}\n\nfun Difficulty.toInt() \u003d when (this) {\n    Difficulty.EASY -\u003e 1\n    Difficulty.MEDIUM -\u003e 2\n    Difficulty.HARD -\u003e 3\n}\n\nfun Int.toDifficulty() \u003d when (this) {\n    1 -\u003e Difficulty.EASY\n    2 -\u003e Difficulty.MEDIUM\n    else -\u003e Difficulty.HARD\n}\n\n@PreviewLightDark\n@PreviewScreenSizes\n@Composable\nprivate fun SettingsPreview() {\n    MultiplyTheme {\n        SettingsScreen(onBackClick \u003d {}, state \u003d GameState()) { }\n    }\n}\n\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/feat_bubblemode/WelcomeScreen.kt, lines\u003dALL(1-207)\npackage com.stephenwanjala.multiply.game.feat_bubblemode\n\nimport androidx.compose.animation.core.EaseInOutQuad\nimport androidx.compose.animation.core.EaseOutBounce\nimport androidx.compose.animation.core.animate\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\nimport androidx.compose.foundation.layout.FlowColumn\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.consumeWindowInsets\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.tooling.preview.PreviewLightDark\nimport androidx.compose.ui.tooling.preview.PreviewScreenSizes\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.stephenwanjala.multiply.R\nimport com.stephenwanjala.multiply.game.components.animatedBackground\nimport com.stephenwanjala.multiply.ui.theme.MultiplyTheme\n\n@OptIn(ExperimentalLayoutApi::class, ExperimentalMaterial3Api::class)\n@Composable\nfun WelcomeScreen(\n    onPlayClick: () -\u003e Unit,\n    onHowToPlayClick: () -\u003e Unit,\n    onSettingsClick: () -\u003e Unit,\n    onNavigateUp: () -\u003e Unit\n) {\n    Surface(\n        modifier \u003d Modifier\n            .fillMaxSize()\n            .background(\n                brush \u003d Brush.linearGradient(\n                    colors \u003d listOf(\n                        Color(0xFF4CAF50),\n                        MaterialTheme.colorScheme.background,\n                        Color(0xFF81D4FA)\n                    ),\n                )\n            )\n    ) {\n        Scaffold(modifier \u003d Modifier.fillMaxSize(), topBar \u003d {\n            TopAppBar(title \u003d {\n                Text(text \u003d \&quot;Falling Bubble\&quot;, fontWeight \u003d FontWeight.Bold)\n            }, navigationIcon \u003d {\n                IconButton(onClick \u003d onNavigateUp) {\n                    Icon(\n                        imageVector \u003d Icons.AutoMirrored.Default.ArrowBack,\n                        contentDescription \u003d \&quot;Go Back\&quot;\n                    )\n                }\n            })\n        }) { paddingValues -\u003e\n            FlowColumn(\n                modifier \u003d Modifier\n                    .fillMaxSize()\n                    .padding(paddingValues)\n                    .consumeWindowInsets(paddingValues)\n                    .animatedBackground(),\n                verticalArrangement \u003d Arrangement.SpaceEvenly,\n                horizontalArrangement \u003d Arrangement.Absolute.Center\n            ) {\n                // Animated logo\n                AnimatedLogo()\n\n                // Mascot\n                Image(\n                    painter \u003d painterResource(id \u003d R.drawable.math_mascot),\n                    contentDescription \u003d \&quot;Math Mascot\&quot;,\n                    modifier \u003d Modifier.size(200.dp)\n                )\n\n                // Buttons\n                Column(\n                    horizontalAlignment \u003d Alignment.CenterHorizontally,\n                    modifier \u003d Modifier.padding(bottom \u003d 32.dp)\n                ) {\n                    PulsatingButton(\n                        onClick \u003d onPlayClick,\n                        text \u003d \&quot;Play!\&quot;,\n                        color \u003d Color(0xFF4CAF50),\n                    )\n                    Spacer(modifier \u003d Modifier.height(16.dp))\n                    Button(\n                        onClick \u003d onHowToPlayClick,\n                        colors \u003d ButtonDefaults.buttonColors(containerColor \u003d Color(0xFFFFA000)),\n                        shape \u003d MaterialTheme.shapes.medium\n                    ) {\n                        Text(\&quot;How to Play\&quot;, fontSize \u003d 18.sp)\n                    }\n                    Spacer(modifier \u003d Modifier.height(16.dp))\n                    Button(\n                        onClick \u003d onSettingsClick,\n                        colors \u003d ButtonDefaults.buttonColors(containerColor \u003d Color(0xFF7C4DFF)),\n                        shape \u003d MaterialTheme.shapes.medium\n                    ) {\n                        Text(\&quot;Settings\&quot;, fontSize \u003d 18.sp)\n                    }\n                }\n            }\n\n        }\n    }\n}\n\n\n@Composable\nfun AnimatedLogo() {\n    var logoScale by remember { mutableFloatStateOf(0.5f) }\n\n    LaunchedEffect(Unit) {\n        animate(\n            initialValue \u003d 0.5f,\n            targetValue \u003d 1f,\n            animationSpec \u003d tween(1000, easing \u003d EaseOutBounce)\n        ) { value, _ -\u003e logoScale \u003d value }\n    }\n\n    Text(\n        text \u003d \&quot;Math\\n\\nChallenge!\&quot;,\n        fontSize \u003d 48.sp,\n        fontWeight \u003d FontWeight.Bold,\n//        color \u003d Color.White,\n        modifier \u003d Modifier\n            .graphicsLayer {\n                scaleX \u003d logoScale\n                scaleY \u003d logoScale\n            }\n            .padding(top \u003d 48.dp)\n    )\n}\n\n@Composable\nfun PulsatingButton(onClick: () -\u003e Unit, text: String, color: Color) {\n    var buttonScale by remember { mutableFloatStateOf(1f) }\n\n    LaunchedEffect(Unit) {\n        while (true) {\n            animate(\n                initialValue \u003d 1f,\n                targetValue \u003d 1.2f,\n                animationSpec \u003d tween(500, easing \u003d EaseInOutQuad)\n            ) { value, _ -\u003e buttonScale \u003d value }\n            animate(\n                initialValue \u003d 1.2f,\n                targetValue \u003d 1f,\n                animationSpec \u003d tween(500, easing \u003d EaseInOutQuad)\n            ) { value, _ -\u003e buttonScale \u003d value }\n        }\n    }\n\n    Button(\n        onClick \u003d onClick,\n        modifier \u003d Modifier\n            .graphicsLayer {\n                scaleX \u003d buttonScale\n                scaleY \u003d buttonScale\n            }\n            .size(width \u003d 200.dp, height \u003d 60.dp),\n        colors \u003d ButtonDefaults.buttonColors(containerColor \u003d color),\n        shape \u003d MaterialTheme.shapes.medium\n    ) {\n        Text(text, fontSize \u003d 24.sp, fontWeight \u003d FontWeight.Bold)\n    }\n}\n\n\n@PreviewLightDark\n@PreviewScreenSizes\n@Composable\nprivate fun PreviewWelcomeScreen() {\n    MultiplyTheme {\n        WelcomeScreen(onSettingsClick \u003d {}, onPlayClick \u003d {}, onHowToPlayClick \u003d {}, onNavigateUp \u003d {})\n    }\n}\n\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/feat_quizmode/QuestionsGen.kt, lines\u003dALL(1-149)\npackage com.stephenwanjala.multiply.game.feat_quizmode\n\nimport com.stephenwanjala.multiply.game.models.MathQuestion\nimport com.stephenwanjala.multiply.game.models.QuizDifficulty\nimport kotlin.math.pow\nimport kotlin.random.Random\n\nprivate val random \u003d Random.Default // Use a single Random instance\n\nfun generateQuestions(difficulty: QuizDifficulty): List\u003cMathQuestion\u003e {\n    return List(difficulty.questionCount) { generateQuestion(difficulty) }\n}\n\nfun generateQuestion(difficulty: QuizDifficulty): MathQuestion {\n    val (num1, num2, operation) \u003d\n        when (difficulty) {\n            QuizDifficulty.BEGINNER -\u003e\n                Triple(\n                    difficulty.numberRange.random(random),\n                    difficulty.numberRange.random(random),\n                    listOf(\&quot;+\&quot;, \&quot;-\&quot;).random(random)\n                )\n\n            QuizDifficulty.INTERMEDIATE -\u003e\n                Triple(\n                    difficulty.numberRange.random(random),\n                    (2..20).random(random),\n                    listOf(\&quot;+\&quot;, \&quot;-\&quot;, \&quot;*\&quot;, \&quot;/\&quot;).random(random)\n                )\n\n            QuizDifficulty.ADVANCED -\u003e\n                Triple(\n                    difficulty.numberRange.random(random),\n                    (2..10).random(random),\n                    listOf(\&quot;+\&quot;, \&quot;-\&quot;, \&quot;*\&quot;, \&quot;/\&quot;, \&quot;%\&quot;, \&quot;^\&quot;).random(random)\n                )\n\n            QuizDifficulty.EXPERT -\u003e\n                Triple(\n                    difficulty.numberRange.random(random),\n                    (2..15).random(random),\n                    listOf(\&quot;+\&quot;, \&quot;-\&quot;, \&quot;*\&quot;, \&quot;/\&quot;, \&quot;%\&quot;, \&quot;^\&quot;, \&quot;()\&quot;, \&quot;exp\&quot;).random(random)\n                )\n        }\n\n    val (finalNum1, finalNum2) \u003d\n        if (operation \u003d\u003d \&quot;-\&quot; \u0026\u0026 num2 \u003e num1) {\n            num2 to num1 // Swap numbers if subtraction and num2 is greater than num1\n        } else {\n            num1 to num2\n        }\n\n    val answer \u003d\n        when (operation) {\n            \&quot;+\&quot; -\u003e finalNum1 + finalNum2\n            \&quot;-\&quot; -\u003e finalNum1 - finalNum2\n            \&quot;*\&quot; -\u003e finalNum1 * finalNum2\n            \&quot;/\&quot; -\u003e {\n                if (finalNum2 \u003d\u003d 0) finalNum1 // Avoid division by zero in the question itself\n                else finalNum1 / finalNum2\n            }\n\n            \&quot;%\&quot; -\u003e {\n                if (finalNum2 \u003d\u003d 0) 0 // Avoid modulo by zero\n                else finalNum1 % finalNum2\n            }\n\n            \&quot;^\&quot; -\u003e finalNum1.toDouble().pow(finalNum2.toDouble()).toInt()\n            \&quot;()\&quot; -\u003e {\n                val num3 \u003d (1..10).random(random)\n                val operation1 \u003d listOf(\&quot;+\&quot;, \&quot;-\&quot;).random(random)\n                val operation2 \u003d listOf(\&quot;*\&quot;, \&quot;/\&quot;).random(random)\n\n                // Ensure no division by zero\n                val safeNum2 \u003d if (finalNum2 \u003d\u003d 0) 1 else finalNum2\n\n                val question \u003d \&quot;($finalNum1 $operation1 $safeNum2) $operation2 $num3\&quot;\n\n                val answer \u003d\n                    when (operation2) {\n                        \&quot;*\&quot; -\u003e\n                            when (operation1) {\n                                \&quot;+\&quot; -\u003e (finalNum1 + safeNum2) * num3\n                                \&quot;-\&quot; -\u003e (finalNum1 - safeNum2) * num3\n                                else -\u003e 0 // Should not happen\n                            }\n\n                        \&quot;/\&quot; -\u003e\n                            when (operation1) {\n                                \&quot;+\&quot; -\u003e (finalNum1 + safeNum2) / num3\n                                \&quot;-\&quot; -\u003e (finalNum1 - safeNum2) / num3\n                                else -\u003e 0 // Should not happen\n                            }\n\n                        else -\u003e 0 // Should not happen\n                    }\n\n                val wrongAnswers \u003d generateWrongAnswers(answer, difficulty)\n\n                return MathQuestion(\n                    question \u003d question,\n                    level \u003d difficulty,\n                    answer \u003d answer,\n                    wrongAnswers \u003d wrongAnswers\n                )\n            }\n\n            \&quot;exp\&quot; -\u003e {\n                val base \u003d (2..5).random(random)\n                base.toDouble().pow(finalNum1.toDouble()).toInt()\n            }\n\n            else -\u003e finalNum1 + finalNum2\n        }\n\n    val wrongAnswers \u003d generateWrongAnswers(answer, difficulty)\n\n    return MathQuestion(\n        question \u003d \&quot;$finalNum1 $operation $finalNum2\&quot;,\n        level \u003d difficulty,\n        answer \u003d answer,\n        wrongAnswers \u003d wrongAnswers\n    )\n}\n\n\nfun generateWrongAnswers(correctAnswer: Int, difficulty: QuizDifficulty): List\u003cInt\u003e {\n    if (correctAnswer \u003c 0) {\n        return emptyList()\n    }\n\n    val range \u003d\n        when (difficulty) {\n            QuizDifficulty.BEGINNER -\u003e -10..10\n            QuizDifficulty.INTERMEDIATE -\u003e -20..20\n            QuizDifficulty.ADVANCED -\u003e -50..50\n            QuizDifficulty.EXPERT -\u003e -100..100\n        }\n\n    val candidates \u003d\n        List(100) { correctAnswer + range.random(random) } // Generate a larger pool\n\n    return candidates\n        .filter { it !\u003d correctAnswer \u0026\u0026 it \u003e\u003d 0 } // Filter out correct answers and negatives\n        .distinct() // Remove duplicates\n        .shuffled(random) // Shuffle to ensure randomness\n        .take(3) // Take the first 3\n}\n\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/feat_quizmode/QuestionsScreen.kt, lines\u003dALL(1-522)\npackage com.stephenwanjala.multiply.game.feat_quizmode\n\nimport androidx.compose.animation.animateColorAsState\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.animation.core.FastOutSlowInEasing\nimport androidx.compose.animation.core.RepeatMode\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.animateDpAsState\nimport androidx.compose.animation.core.animateFloat\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.infiniteRepeatable\nimport androidx.compose.animation.core.rememberInfiniteTransition\nimport androidx.compose.animation.core.spring\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.WindowInsetsSides.Companion.Bottom\nimport androidx.compose.foundation.layout.WindowInsetsSides.Companion.Horizontal\nimport androidx.compose.foundation.layout.aspectRatio\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.only\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.systemBars\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.windowInsetsPadding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.grid.GridCells\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\nimport androidx.compose.foundation.lazy.itemsIndexed\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Check\nimport androidx.compose.material.icons.filled.Close\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.CenterAlignedTopAppBar\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.LinearProgressIndicator\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.OutlinedButton\nimport androidx.compose.material3.ProgressIndicatorDefaults\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextDecoration\nimport androidx.compose.ui.unit.dp\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport com.stephenwanjala.multiply.game.components.glowingOrbs\nimport com.stephenwanjala.multiply.game.components.neumorphicShadow\n\n@Composable\nfun QuestionsScreen(viewModel: QuestionsViewModel, onClosePressed: () -\u003e Unit) {\n    val state \u003d viewModel.state.collectAsStateWithLifecycle().value\n\n    Surface(color \u003d MaterialTheme.colorScheme.background) {\n        Scaffold(\n            topBar \u003d {\n                QuestionsTopAppBar(\n                    onClosePressed \u003d onClosePressed,\n                    currentQuestionIndex \u003d state.currentQuestionIndex,\n                    totalCount \u003d state.questions.size\n                )\n            },\n            bottomBar \u003d {\n                QuestionBottomBar(\n                    shouldShowPreviousButton \u003d state.currentQuestionIndex \u003e 0,\n                    shouldShowDoneButton \u003d state.currentQuestionIndex \u003d\u003d state.questions.lastIndex,\n                    isNextButtonEnabled \u003d state.selectedAnswer !\u003d null,\n                    onPreviousPressed \u003d { viewModel.onAction(QuestionAction.PreviousQuestion) },\n                    onNextPressed \u003d { viewModel.onAction(QuestionAction.NextQuestion) },\n                    onDonePressed \u003d { viewModel.onAction(QuestionAction.SubmitAnswer) }\n                )\n            }\n        ) { padding -\u003e\n            Column(\n                modifier \u003d Modifier\n                    .padding(padding)\n                    .fillMaxSize()\n                    .glowingOrbs()\n                    .padding(24.dp),\n                verticalArrangement \u003d Arrangement.Center,\n                horizontalAlignment \u003d Alignment.CenterHorizontally\n            ) {\n                QuestionContent(\n                    state \u003d state,\n                    onAnswerSelected \u003d { answer -\u003e\n                        viewModel.onAction(QuestionAction.SelectAnswer(answer))\n                    }\n                )\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun QuestionContent(\n    state: QuestionsState,\n    onAnswerSelected: (Int) -\u003e Unit\n) {\n    val currentQuestion \u003d state.currentQuestion\n    val infiniteTransition \u003d rememberInfiniteTransition()\n    val animatedOffset by infiniteTransition.animateFloat(\n        initialValue \u003d 0f,\n        targetValue \u003d 8f,\n        animationSpec \u003d infiniteRepeatable(\n            animation \u003d tween(1000, easing \u003d FastOutSlowInEasing),\n            repeatMode \u003d RepeatMode.Reverse\n        )\n    )\n\n    Column(\n        modifier \u003d Modifier\n            .fillMaxSize()\n            .padding(8.dp),\n        verticalArrangement \u003d Arrangement.Center,\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        // Floating question card with dynamic shadow\n        Box(\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .padding(vertical \u003d 32.dp)\n                .neumorphicShadow(\n                    lightColor \u003d MaterialTheme.colorScheme.surface\n                )\n                .background(\n                    brush \u003d Brush.verticalGradient(\n                        colors \u003d listOf(\n                            MaterialTheme.colorScheme.primaryContainer,\n                            MaterialTheme.colorScheme.secondaryContainer\n                        )\n                    ),\n                    shape \u003d RoundedCornerShape(16.dp)\n                )\n                .padding(24.dp),\n            contentAlignment \u003d Alignment.Center\n        ) {\n            Text(\n                text \u003d currentQuestion?.question ?: \&quot; Loading...\&quot;,\n                style \u003d MaterialTheme.typography.displayMedium.copy(\n                    fontWeight \u003d FontWeight.ExtraBold,\n                    textAlign \u003d TextAlign.Center\n                ),\n                color \u003d MaterialTheme.colorScheme.onPrimaryContainer,\n                modifier \u003d Modifier.offset(y \u003d (-animatedOffset).dp)\n            )\n        }\n\n        Spacer(modifier \u003d Modifier.weight(1f))\n\n        // Answer grid with animated entries\n        LazyVerticalGrid(\n            columns \u003d GridCells.Fixed(2),\n            modifier \u003d Modifier.fillMaxWidth(),\n            horizontalArrangement \u003d Arrangement.spacedBy(16.dp),\n            verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n        ) {\n            items(currentQuestion?.allAnswers?.size ?: 0) { index -\u003e\n                val answer \u003d currentQuestion?.allAnswers?.get(index) ?: 0\n                val isSelected \u003d answer \u003d\u003d state.selectedAnswer\n\n                AnswerParticle(\n                    number \u003d answer,\n                    isSelected \u003d isSelected,\n                    onClick \u003d { onAnswerSelected(answer) }\n                )\n            }\n        }\n\n        // Progress emojis\n        Row(\n            modifier \u003d Modifier.padding(top \u003d 24.dp),\n            horizontalArrangement \u003d Arrangement.spacedBy(8.dp)\n        ) {\n            repeat(state.questions.size) { index -\u003e\n                val emoji \u003d when {\n                    index \u003c state.currentQuestionIndex -\u003e \&quot;✅\&quot;\n                    index \u003d\u003d state.currentQuestionIndex -\u003e \&quot;\&quot;\n                    else -\u003e \&quot;➖\&quot;\n                }\n                Text(\n                    text \u003d emoji,\n                    modifier \u003d Modifier\n                        .scale(if (index \u003d\u003d state.currentQuestionIndex) 1.2f else 1f)\n                        .animateContentSize()\n                )\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun AnswerParticle(\n    number: Int,\n    isSelected: Boolean,\n    onClick: () -\u003e Unit\n) {\n    val animatedColor by animateColorAsState(\n        targetValue \u003d if (isSelected) MaterialTheme.colorScheme.primary\n        else MaterialTheme.colorScheme.surfaceVariant,\n        animationSpec \u003d spring(stiffness \u003d Spring.StiffnessLow)\n    )\n\n    val animatedElevation by animateDpAsState(\n        targetValue \u003d if (isSelected) 16.dp else 8.dp\n    )\n\n    Box(\n        modifier \u003d Modifier\n            .aspectRatio(1f)\n            .neumorphicShadow(\n                offset \u003d 8.dp,\n                blurRadius \u003d animatedElevation,\n                shape \u003d CircleShape,\n                inverted \u003d true\n            )\n\n            .background(\n                color \u003d animatedColor,\n                shape \u003d CircleShape\n            )\n            .clickable(onClick \u003d onClick)\n            .padding(16.dp),\n        contentAlignment \u003d Alignment.Center\n    ) {\n        Text(\n            text \u003d number.toString(),\n            style \u003d MaterialTheme.typography.headlineLarge.copy(\n                fontWeight \u003d FontWeight.Black,\n                color \u003d if (isSelected) MaterialTheme.colorScheme.onPrimary\n                else MaterialTheme.colorScheme.onSurfaceVariant\n            ),\n            modifier \u003d Modifier.scale(if (isSelected) 1.15f else 1f)\n        )\n    }\n}\n\n@Composable\nprivate fun AnswerOption(\n    answer: Int,\n    isSelected: Boolean,\n    modifier: Modifier \u003d Modifier,\n    onSelected: () -\u003e Unit\n) {\n    val backgroundColor \u003d if (isSelected) {\n        MaterialTheme.colorScheme.primaryContainer\n    } else {\n        MaterialTheme.colorScheme.surfaceVariant\n    }\n\n    val contentColor \u003d if (isSelected) {\n        MaterialTheme.colorScheme.onPrimaryContainer\n    } else {\n        MaterialTheme.colorScheme.onSurfaceVariant\n    }\n\n    OutlinedButton(\n        onClick \u003d onSelected,\n        modifier \u003d modifier\n            .height(80.dp),\n        colors \u003d ButtonDefaults.outlinedButtonColors(\n            containerColor \u003d backgroundColor,\n            contentColor \u003d contentColor\n        ),\n        border \u003d ButtonDefaults.outlinedButtonBorder(enabled \u003d isSelected)\n    ) {\n        Text(\n            text \u003d answer.toString(),\n            style \u003d MaterialTheme.typography.headlineMedium,\n            fontWeight \u003d FontWeight.Bold\n        )\n    }\n}\n\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun QuestionsTopAppBar(\n    modifier: Modifier \u003d Modifier,\n    onClosePressed: () -\u003e Unit,\n    currentQuestionIndex: Int,\n    totalCount: Int\n) {\n    Column(modifier \u003d modifier.fillMaxWidth()) {\n\n        CenterAlignedTopAppBar(\n            title \u003d {\n                TopAppBarTitle(\n                    questionIndex \u003d currentQuestionIndex,\n                    totalQuestionsCount \u003d totalCount,\n                )\n            },\n            actions \u003d {\n                IconButton(\n                    onClick \u003d onClosePressed,\n                    modifier \u003d Modifier.padding(4.dp)\n                ) {\n                    Icon(\n                        Icons.Filled.Close,\n                        contentDescription \u003d \&quot;Close\&quot;,\n                        tint \u003d MaterialTheme.colorScheme.onSurface.copy(.67f)\n                    )\n                }\n            }\n        )\n\n        val animatedProgress by animateFloatAsState(\n            targetValue \u003d (currentQuestionIndex + 1) / totalCount.toFloat(),\n            animationSpec \u003d ProgressIndicatorDefaults.ProgressAnimationSpec\n        )\n        LinearProgressIndicator(\n            progress \u003d { animatedProgress },\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .padding(horizontal \u003d 20.dp),\n            trackColor \u003d MaterialTheme.colorScheme.onSurface.copy(alpha \u003d 0.12f),\n        )\n    }\n}\n\n\n@Composable\nprivate fun TopAppBarTitle(\n    questionIndex: Int,\n    totalQuestionsCount: Int,\n    modifier: Modifier \u003d Modifier\n) {\n    Row(modifier \u003d modifier) {\n        Text(\n            text \u003d (questionIndex + 1).toString(),\n            style \u003d MaterialTheme.typography.labelMedium,\n            color \u003d MaterialTheme.colorScheme.onSurface.copy(alpha \u003d 0.6f)\n        )\n        Text(\n            text \u003d \&quot;of $totalQuestionsCount\&quot;,\n            style \u003d MaterialTheme.typography.labelMedium,\n            color \u003d MaterialTheme.colorScheme.onSurface.copy(alpha \u003d 0.38f)\n        )\n    }\n}\n\n@Composable\nfun QuestionBottomBar(\n    shouldShowPreviousButton: Boolean,\n    shouldShowDoneButton: Boolean,\n    isNextButtonEnabled: Boolean,\n    onPreviousPressed: () -\u003e Unit,\n    onNextPressed: () -\u003e Unit,\n    onDonePressed: () -\u003e Unit\n) {\n    Surface(shadowElevation \u003d 7.dp) {\n        Row(\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                // Since we\u0027re not using a Material component but we implement our own bottom bar,\n                // we will also need to implement our own edge-to-edge support. Similar to the\n                // NavigationBar, we add the horizontal and bottom padding if it hasn\u0027t been consumed yet.\n                .windowInsetsPadding(WindowInsets.systemBars.only(Horizontal + Bottom))\n                .padding(horizontal \u003d 16.dp, vertical \u003d 20.dp)\n        ) {\n            if (shouldShowPreviousButton) {\n                OutlinedButton(\n                    modifier \u003d Modifier\n                        .weight(1f)\n                        .height(48.dp),\n                    onClick \u003d onPreviousPressed,\n                    shape \u003d MaterialTheme.shapes.medium\n                ) {\n                    Text(text \u003d \&quot;Previous\&quot;)\n                }\n                Spacer(modifier \u003d Modifier.width(16.dp))\n            }\n            if (shouldShowDoneButton) {\n                Button(\n                    modifier \u003d Modifier\n                        .weight(1f)\n                        .height(48.dp),\n                    onClick \u003d onDonePressed,\n                    enabled \u003d isNextButtonEnabled,\n                    shape \u003d MaterialTheme.shapes.medium\n                ) {\n                    Text(text \u003d \&quot;Done\&quot;)\n                }\n            } else {\n                Button(\n                    modifier \u003d Modifier\n                        .weight(1f)\n                        .height(48.dp),\n                    onClick \u003d onNextPressed,\n                    enabled \u003d isNextButtonEnabled,\n                    shape \u003d MaterialTheme.shapes.medium\n                ) {\n                    Text(text \u003d \&quot;Next\&quot;)\n                }\n            }\n        }\n    }\n}\n\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun RecapScreen(viewModel: QuestionsViewModel) {\n    Surface(\n        color \u003d MaterialTheme.colorScheme.background,\n        modifier \u003d Modifier\n            .fillMaxSize()\n            .glowingOrbs()\n    ) {\n        Scaffold(topBar \u003d {\n            TopAppBar(title \u003d { Text(text \u003d \&quot;Recap \&quot;) }, actions \u003d {\n                IconButton(onClick \u003d { /*TODO*/ }) {\n                    Icon(imageVector \u003d Icons.Default.Close, contentDescription \u003d \&quot;Close\&quot;)\n                }\n            })\n        }) { paddingValues -\u003e\n            LazyColumn(\n                contentPadding \u003d paddingValues\n            ) {\n//                itemsIndexed(gameResults) { index, result -\u003e\n//                    QuestionRecapItem(questionNumber \u003d index + 1, result \u003d result)\n//                    Spacer(modifier \u003d Modifier.height(8.dp))\n//                }\n            }\n\n        }\n    }\n\n}\n\n\n@Composable\nfun AnswerRow(answer: Int, isUserAnswer: Boolean, isCorrect: Boolean) {\n    Row(\n        modifier \u003d Modifier\n            .fillMaxWidth()\n            .padding(vertical \u003d 4.dp),\n        verticalAlignment \u003d Alignment.CenterVertically\n    ) {\n        Text(\n            text \u003d answer.toString(),\n            style \u003d MaterialTheme.typography.bodyMedium,\n            color \u003d when {\n                isCorrect -\u003e Color(0xFF4CAF50)\n                isUserAnswer -\u003e Color.Gray\n                else -\u003e MaterialTheme.colorScheme.onSurface\n            },\n            textDecoration \u003d if (isUserAnswer \u0026\u0026 !isCorrect) TextDecoration.LineThrough else TextDecoration.None,\n            modifier \u003d Modifier.weight(1f)\n        )\n        if (isCorrect) {\n            Icon(\n                imageVector \u003d Icons.Filled.Check,\n                contentDescription \u003d \&quot;Correct Answer\&quot;,\n                tint \u003d Color(0xFF4CAF50)\n            )\n        } else if (isUserAnswer) {\n            Icon(\n                imageVector \u003d Icons.Filled.Close,\n                contentDescription \u003d \&quot;Wrong Answer\&quot;,\n                tint \u003d MaterialTheme.colorScheme.error\n            )\n        }\n    }\n}\n\n@Composable\nfun QuestionRecapItem(questionNumber: Int, result: GameResult) {\n    Card(\n        modifier \u003d Modifier.fillMaxWidth(),\n        colors \u003d CardDefaults.cardColors(\n            containerColor \u003d MaterialTheme.colorScheme.surface\n        )\n    ) {\n        Column(\n            modifier \u003d Modifier.padding(16.dp)\n        ) {\n            Text(\n                text \u003d \&quot;Question $questionNumber: ${result.question}\&quot;,\n                style \u003d MaterialTheme.typography.bodyLarge,\n                fontWeight \u003d FontWeight.Bold\n            )\n            Spacer(modifier \u003d Modifier.height(8.dp))\n            AnswerRow(\n                answer \u003d result.correctAnswer,\n                isUserAnswer \u003d result.userAnswer \u003d\u003d result.correctAnswer,\n                isCorrect \u003d true\n            )\n            if (!result.isCorrect) {\n                AnswerRow(\n                    answer \u003d result.userAnswer,\n                    isUserAnswer \u003d true,\n                    isCorrect \u003d false\n                )\n            }\n        }\n    }\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/feat_quizmode/QuestionsViewModel.kt, lines\u003dALL(1-134)\npackage com.stephenwanjala.multiply.game.feat_quizmode\n\nimport androidx.datastore.core.DataStore\nimport androidx.datastore.preferences.core.Preferences\nimport androidx.datastore.preferences.core.edit\nimport androidx.datastore.preferences.core.intPreferencesKey\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.stephenwanjala.multiply.game.models.MathQuestion\nimport com.stephenwanjala.multiply.game.models.QuizDifficulty\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.stateIn\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport javax.inject.Inject\n\n@HiltViewModel\nclass QuestionsViewModel @Inject constructor(\n    private val dataStore: DataStore\u003cPreferences\u003e\n) : ViewModel() {\n    private val _state \u003d MutableStateFlow(QuestionsState())\n    val state \u003d _state\n        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), _state.value)\n\n    init {\n        viewModelScope.launch {\n            dataStore.data.collect { preferences -\u003e\n                val savedLevel \u003d preferences[LEVEL_KEY]?.let { QuizDifficulty.entries[it] }\n                    ?: QuizDifficulty.BEGINNER\n                _state.update { it.copy(level \u003d savedLevel) }\n                setUpQuestions()\n            }\n        }\n    }\n    fun onAction(action: QuestionAction) {\n        when (action) {\n            is QuestionAction.SelectAnswer -\u003e {\n                _state.update { it.copy(selectedAnswer \u003d action.answer) }\n            }\n            QuestionAction.SubmitAnswer -\u003e {\n                submitAnswers()\n            }\n            QuestionAction.NextQuestion -\u003e {\n                _state.update { state -\u003e\n                    val nextIndex \u003d state.currentQuestionIndex + 1\n                    state.copy(\n                        currentQuestionIndex \u003d nextIndex,\n                        currentQuestion \u003d state.questions.getOrNull(nextIndex),\n                        selectedAnswer \u003d null,\n                        showDoneButton \u003d nextIndex \u003d\u003d state.questions.lastIndex\n                    )\n                }\n            }\n            QuestionAction.PreviousQuestion -\u003e {\n                _state.update { state -\u003e\n                    val prevIndex \u003d state.currentQuestionIndex - 1\n                    state.copy(\n                        currentQuestionIndex \u003d prevIndex,\n                        currentQuestion \u003d state.questions.getOrNull(prevIndex),\n                        selectedAnswer \u003d state.selectedAnswers[prevIndex],\n                        showDoneButton \u003d false\n                    )\n                }\n            }\n            is QuestionAction.UpdateLevel -\u003e {\n                setDifficulty(action.level)\n            }\n        }\n    }\n\n    companion object {\n        private val LEVEL_KEY \u003d intPreferencesKey(\&quot;QuizDifficulty\&quot;)\n    }\n    private  fun setUpQuestions(){\n        val questions \u003d generateQuestions(state.value.level)\n        println(questions)\n        _state.update { it.copy(questions \u003d questions, currentQuestion \u003d questions.first()) }\n    }\n\n    private fun setDifficulty(difficulty: QuizDifficulty) {\n        _state.update { it.copy(level \u003d difficulty) }\n        viewModelScope.launch {\n            dataStore.edit { prefs -\u003e\n                prefs[LEVEL_KEY] \u003d difficulty.ordinal\n            }\n        }\n    }\n\n    private fun submitAnswers() {\n        viewModelScope.launch {\n            val results \u003d state.value.questions.mapIndexed { index, question -\u003e\n                GameResult(\n                    question \u003d question.question,\n                    correctAnswer \u003d question.answer,\n                    userAnswer \u003d state.value.selectedAnswers[index] ?: -1,\n                    isCorrect \u003d state.value.selectedAnswers[index] \u003d\u003d question.answer\n                )\n            }\n            _state.update { it.copy(results \u003d results) }\n            // Handle navigation to results screen\n        }\n    }\n}\n\n\ndata class QuestionsState(\n    val currentQuestion: MathQuestion? \u003d null,\n    val level: QuizDifficulty \u003d QuizDifficulty.BEGINNER,\n    val questions: List\u003cMathQuestion\u003e \u003d emptyList(),\n    val results: List\u003cGameResult\u003e \u003d emptyList(),\n    val nextButtonEnabled: Boolean \u003d false,\n    val showPreviousButton: Boolean \u003d false,\n    val showDoneButton: Boolean \u003d false,\n    val currentQuestionIndex:Int \u003d0,\n    val selectedAnswers: Map\u003cInt, Int\u003e \u003d emptyMap(),\n    val selectedAnswer: Int? \u003d null\n    )\n\ndata class GameResult(\n    val question: String,\n    val correctAnswer: Int,\n    val userAnswer: Int,\n    val isCorrect: Boolean\n)\n\nsealed interface QuestionAction {\n    data class SelectAnswer(val answer: Int) : QuestionAction\n    data object SubmitAnswer : QuestionAction\n    data object NextQuestion : QuestionAction\n    data object PreviousQuestion : QuestionAction\n    data class UpdateLevel(val level: QuizDifficulty):QuestionAction\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/models/BubbleMathDifficulty.kt, lines\u003dALL(1-7)\npackage com.stephenwanjala.multiply.game.models\n\nenum class BubbleMathDifficulty {\n    EASY,\n    MEDIUM,\n    HARD\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/models/GameMode.kt, lines\u003dALL(1-6)\npackage com.stephenwanjala.multiply.game.models\n\nsealed class GameMode {\n    data class BubbleMathBlitz(val difficulty: BubbleMathDifficulty) : GameMode()\n    data class QuizGenius(val difficulty: QuizDifficulty) : GameMode()\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/models/MathQuestion.kt, lines\u003dALL(1-11)\npackage com.stephenwanjala.multiply.game.models\n\ndata class MathQuestion(\n    val question: String,\n    val level: QuizDifficulty,\n    val answer: Int,\n    val wrongAnswers: List\u003cInt\u003e\n) {\n    val allAnswers: List\u003cInt\u003e \u003d (wrongAnswers + answer).shuffled()\n}\n\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/models/QuizDifficulty.kt, lines\u003dALL(1-8)\npackage com.stephenwanjala.multiply.game.models\n\nenum class QuizDifficulty(val questionCount: Int, val numberRange: IntRange) {\n    BEGINNER(15, 1..20),\n    INTERMEDIATE(20, 5..50),\n    ADVANCED(25, 10..100),\n    EXPERT(30, 1..200)\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/utlis/BitmapFromDrawable.kt, lines\u003dALL(1-32)\npackage com.stephenwanjala.multiply.game.utlis\n\nimport android.graphics.Bitmap\nimport android.graphics.drawable.BitmapDrawable\nimport androidx.annotation.DrawableRes\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.graphics.ImageBitmap\nimport androidx.compose.ui.graphics.asImageBitmap\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.core.content.ContextCompat\n\n@Composable\nfun rememberBitmapFromDrawable(@DrawableRes resId: Int): ImageBitmap {\n    val context \u003d LocalContext.current\n    val drawable \u003d ContextCompat.getDrawable(context, resId) ?: return ImageBitmap(1, 1)\n\n    return if (drawable is BitmapDrawable) {\n        drawable.bitmap.asImageBitmap()\n    } else {\n        // Convert VectorDrawable to Bitmap\n        val bitmap \u003d Bitmap.createBitmap(\n            drawable.intrinsicWidth,\n            drawable.intrinsicHeight,\n            Bitmap.Config.ARGB_8888\n        )\n        val canvas \u003d android.graphics.Canvas(bitmap)\n        drawable.setBounds(0, 0, canvas.width, canvas.height)\n        drawable.draw(canvas)\n        bitmap.asImageBitmap()\n    }\n}\n\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/utlis/Particle.kt, lines\u003dALL(1-28)\npackage com.stephenwanjala.multiply.game.utlis\n\nimport androidx.compose.animation.core.Animatable\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.IntSize\nimport kotlin.random.Random\n\nclass Particle {\n    var x \u003d Animatable(Random.nextFloat() * 1000)\n    var y \u003d Animatable(-Random.nextFloat() * 500 - 100f)\n    private val speedX \u003d Random.nextFloat() * 4 - 2\n    private val speedY \u003d Random.nextFloat() * 2 + 2\n    var size \u003d Random.nextFloat() * 15 + 5\n    var color \u003d Color(\n        Random.nextFloat(), Random.nextFloat(), Random.nextFloat(),\n        Random.nextFloat() * 0.5f + 0.5f\n    )\n\n    suspend fun update(canvasSize: IntSize) {\n        x.snapTo(x.value + speedX)\n        y.snapTo(y.value + speedY)\n\n        if (y.value \u003e canvasSize.height) {\n            y.snapTo(-Random.nextFloat() * 500 - 100f)\n            x.snapTo(Random.nextFloat() * canvasSize.width)\n        }\n    }\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/game/utlis/RandomOffset.kt, lines\u003dALL(1-11)\npackage com.stephenwanjala.multiply.game.utlis\n\nimport androidx.compose.ui.geometry.Offset\nimport kotlin.random.Random\n\nfun randomOffset(): Offset {\n    return Offset(\n        x \u003d Random.nextFloat() * 1000,\n        y \u003d Random.nextFloat() * 2000\n    )\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/ui/navigation/MutiplyNav.kt, lines\u003dALL(1-147)\npackage com.stephenwanjala.multiply.ui.navigation\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.NavHostController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport com.stephenwanjala.multiply.game.models.BubbleMathDifficulty\nimport com.stephenwanjala.multiply.game.models.GameMode\nimport com.stephenwanjala.multiply.game.GameModeSelectionScreen\nimport com.stephenwanjala.multiply.game.feat_bubblemode.InstructionsScreen\nimport com.stephenwanjala.multiply.game.feat_bubblemode.SettingsScreen\nimport com.stephenwanjala.multiply.game.feat_bubblemode.WelcomeScreen\nimport com.stephenwanjala.multiply.game.feat_bubblemode.Difficulty\nimport com.stephenwanjala.multiply.game.feat_bubblemode.GameAction\nimport com.stephenwanjala.multiply.game.feat_bubblemode.GameScreen\nimport com.stephenwanjala.multiply.game.feat_bubblemode.GameViewModel\nimport com.stephenwanjala.multiply.game.feat_quizmode.QuestionAction\nimport com.stephenwanjala.multiply.game.feat_quizmode.QuestionsScreen\nimport com.stephenwanjala.multiply.game.feat_quizmode.QuestionsViewModel\nimport kotlinx.serialization.Serializable\n\n@Composable\nfun MultiplyNav(\n    navHostController: NavHostController,\n    modifier: Modifier \u003d Modifier\n) {\n    val viewModel \u003d hiltViewModel\u003cGameViewModel\u003e()\n    val state \u003d viewModel.state.collectAsStateWithLifecycle().value\n    val questionsVm \u003d hiltViewModel\u003cQuestionsViewModel\u003e()\n    NavHost(\n        navController \u003d navHostController,\n        startDestination \u003d MultiplyDestination.SelectGameMode,\n        modifier \u003d modifier\n    ) {\n        composable\u003cMultiplyDestination.SelectGameMode\u003e {\n            GameModeSelectionScreen { gameMode: GameMode -\u003e\n                when (gameMode) {\n                    is GameMode.BubbleMathBlitz -\u003e {\n                        when (gameMode.difficulty) {\n                            BubbleMathDifficulty.EASY -\u003e viewModel.onAction(\n                                GameAction.UpdateDifficulty(\n                                    difficulty \u003d Difficulty.EASY\n                                )\n                            )\n\n                            BubbleMathDifficulty.MEDIUM -\u003e viewModel.onAction(\n                                GameAction.UpdateDifficulty(\n                                    difficulty \u003d Difficulty.MEDIUM\n                                )\n                            )\n\n                            BubbleMathDifficulty.HARD -\u003e viewModel.onAction(\n                                GameAction.UpdateDifficulty(\n                                    difficulty \u003d Difficulty.HARD\n                                )\n                            )\n                        }\n                        navHostController.navigate(MultiplyDestination.WelComeDestination)\n                    }\n\n                    is GameMode.QuizGenius -\u003e {\n                        questionsVm.onAction(QuestionAction.UpdateLevel(gameMode.difficulty))\n                        navHostController.navigate(MultiplyDestination.QuestionsDestination)\n                    }\n                }\n\n            }\n        }\n        composable\u003cMultiplyDestination.QuestionsDestination\u003e {\n            QuestionsScreen(viewModel\u003dquestionsVm, onClosePressed \u003d navHostController::navigateUp)\n        }\n        composable\u003cMultiplyDestination.WelComeDestination\u003e {\n\n            WelcomeScreen(\n                onPlayClick \u003d { navHostController.navigate(MultiplyDestination.GameDestination) },\n                onHowToPlayClick \u003d {\n                    navHostController.navigate(MultiplyDestination.GameInstructionDestination)\n                },\n                onSettingsClick \u003d {\n                    navHostController.navigate(MultiplyDestination.SettingsDestination)\n                }, onNavigateUp \u003d navHostController::navigateUp)\n        }\n\n        composable\u003cMultiplyDestination.SettingsDestination\u003e {\n            SettingsScreen(\n                onBackClick \u003d navHostController::navigateUp,\n                state \u003d state,\n                onAction \u003d { action -\u003e\n                    viewModel.onAction(action)\n                })\n        }\n        composable\u003cMultiplyDestination.GameInstructionDestination\u003e {\n            InstructionsScreen(\n                onStartGame \u003d {\n                    navHostController.navigate(MultiplyDestination.GameDestination) {\n                        popUpTo\u003cMultiplyDestination.GameInstructionDestination\u003e {\n                            inclusive \u003d true\n                        }\n                    }\n                },\n                navigateUp \u003d navHostController::navigateUp\n            )\n        }\n\n        composable\u003cMultiplyDestination.GameDestination\u003e {\n            GameScreen(viewModel \u003d hiltViewModel(),\n                onNavigateUp \u003d navHostController::navigateUp,\n                toSettings \u003d {\n                    navHostController.navigate(MultiplyDestination.SettingsDestination)\n                },\n                toHowToPlay \u003d { navHostController.navigate(MultiplyDestination.GameInstructionDestination) },\n                ontoHome \u003d {\n                    navHostController.navigate(MultiplyDestination.WelComeDestination) {\n                        popUpTo\u003cMultiplyDestination.WelComeDestination\u003e {\n                            inclusive \u003d true\n                        }\n                    }\n                }\n            )\n        }\n    }\n\n}\n\n\nsealed interface MultiplyDestination {\n    @Serializable\n    data object WelComeDestination : MultiplyDestination\n\n    @Serializable\n    data object SettingsDestination : MultiplyDestination\n\n    @Serializable\n    data object GameInstructionDestination : MultiplyDestination\n\n    @Serializable\n    data object GameDestination : MultiplyDestination\n\n    @Serializable\n    data object SelectGameMode : MultiplyDestination\n\n    @Serializable\n    data object QuestionsDestination:MultiplyDestination\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/ui/theme/Color.kt, lines\u003dALL(1-70)\npackage com.stephenwanjala.multiply.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\n\nval md_theme_light_primary \u003d Color(0xFF9E2A9B)\nval md_theme_light_onPrimary \u003d Color(0xFFFFFFFF)\nval md_theme_light_primaryContainer \u003d Color(0xFFFFD7F5)\nval md_theme_light_onPrimaryContainer \u003d Color(0xFF380038)\nval md_theme_light_secondary \u003d Color(0xFF6D5869)\nval md_theme_light_onSecondary \u003d Color(0xFFFFFFFF)\nval md_theme_light_secondaryContainer \u003d Color(0xFFF7DAEF)\nval md_theme_light_onSecondaryContainer \u003d Color(0xFF271624)\nval md_theme_light_tertiary \u003d Color(0xFF825345)\nval md_theme_light_onTertiary \u003d Color(0xFFFFFFFF)\nval md_theme_light_tertiaryContainer \u003d Color(0xFFFFDBD1)\nval md_theme_light_onTertiaryContainer \u003d Color(0xFF321208)\nval md_theme_light_error \u003d Color(0xFFBA1A1A)\nval md_theme_light_errorContainer \u003d Color(0xFFFFDAD6)\nval md_theme_light_onError \u003d Color(0xFFFFFFFF)\nval md_theme_light_onErrorContainer \u003d Color(0xFF410002)\nval md_theme_light_background \u003d Color(0xFFFFFBFF)\nval md_theme_light_onBackground \u003d Color(0xFF1E1A1D)\nval md_theme_light_surface \u003d Color(0xFFFFFBFF)\nval md_theme_light_onSurface \u003d Color(0xFF1E1A1D)\nval md_theme_light_surfaceVariant \u003d Color(0xFFEEDEE7)\nval md_theme_light_onSurfaceVariant \u003d Color(0xFF4E444B)\nval md_theme_light_outline \u003d Color(0xFF80747C)\nval md_theme_light_inverseOnSurface \u003d Color(0xFFF8EEF2)\nval md_theme_light_inverseSurface \u003d Color(0xFF342F32)\nval md_theme_light_inversePrimary \u003d Color(0xFFFFAAF3)\nval md_theme_light_shadow \u003d Color(0xFF000000)\nval md_theme_light_surfaceTint \u003d Color(0xFF9E2A9B)\nval md_theme_light_outlineVariant \u003d Color(0xFFD1C2CB)\nval md_theme_light_scrim \u003d Color(0xFF000000)\n\nval md_theme_dark_primary \u003d Color(0xFFFFAAF3)\nval md_theme_dark_onPrimary \u003d Color(0xFF5B005B)\nval md_theme_dark_primaryContainer \u003d Color(0xFF810181)\nval md_theme_dark_onPrimaryContainer \u003d Color(0xFFFFD7F5)\nval md_theme_dark_secondary \u003d Color(0xFFDABFD2)\nval md_theme_dark_onSecondary \u003d Color(0xFF3D2B3A)\nval md_theme_dark_secondaryContainer \u003d Color(0xFF554151)\nval md_theme_dark_onSecondaryContainer \u003d Color(0xFFF7DAEF)\nval md_theme_dark_tertiary \u003d Color(0xFFF5B8A7)\nval md_theme_dark_onTertiary \u003d Color(0xFF4C261B)\nval md_theme_dark_tertiaryContainer \u003d Color(0xFF663C2F)\nval md_theme_dark_onTertiaryContainer \u003d Color(0xFFFFDBD1)\nval md_theme_dark_error \u003d Color(0xFFFFB4AB)\nval md_theme_dark_errorContainer \u003d Color(0xFF93000A)\nval md_theme_dark_onError \u003d Color(0xFF690005)\nval md_theme_dark_onErrorContainer \u003d Color(0xFFFFDAD6)\nval md_theme_dark_background \u003d Color(0xFF1E1A1D)\nval md_theme_dark_onBackground \u003d Color(0xFFE9E0E4)\nval md_theme_dark_surface \u003d Color(0xFF1E1A1D)\nval md_theme_dark_onSurface \u003d Color(0xFFE9E0E4)\nval md_theme_dark_surfaceVariant \u003d Color(0xFF4E444B)\nval md_theme_dark_onSurfaceVariant \u003d Color(0xFFD1C2CB)\nval md_theme_dark_outline \u003d Color(0xFF9A8D95)\nval md_theme_dark_inverseOnSurface \u003d Color(0xFF1E1A1D)\nval md_theme_dark_inverseSurface \u003d Color(0xFFE9E0E4)\nval md_theme_dark_inversePrimary \u003d Color(0xFF9E2A9B)\nval md_theme_dark_shadow \u003d Color(0xFF000000)\nval md_theme_dark_surfaceTint \u003d Color(0xFFFFAAF3)\nval md_theme_dark_outlineVariant \u003d Color(0xFF4E444B)\nval md_theme_dark_scrim \u003d Color(0xFF000000)\n\n\nval seed \u003d Color(0xFF800080)\n\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/ui/theme/Theme.kt, lines\u003dALL(1-112)\npackage com.stephenwanjala.multiply.ui.theme\nimport android.app.Activity\nimport android.os.Build\nimport androidx.compose.foundation.isSystemInDarkTheme\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.darkColorScheme\nimport androidx.compose.material3.dynamicDarkColorScheme\nimport androidx.compose.material3.dynamicLightColorScheme\nimport androidx.compose.material3.lightColorScheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.SideEffect\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.toArgb\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalView\nimport androidx.core.view.WindowCompat\n\nprivate val DarkColorScheme \u003d darkColorScheme(\n    primary \u003d md_theme_dark_primary,\n    onPrimary \u003d md_theme_dark_onPrimary,\n    primaryContainer \u003d md_theme_dark_primaryContainer,\n    onPrimaryContainer \u003d md_theme_dark_onPrimaryContainer,\n    secondary \u003d md_theme_dark_secondary,\n    onSecondary \u003d md_theme_dark_onSecondary,\n    secondaryContainer \u003d md_theme_dark_secondaryContainer,\n    onSecondaryContainer \u003d md_theme_dark_onSecondaryContainer,\n    tertiary \u003d md_theme_dark_tertiary,\n    onTertiary \u003d md_theme_dark_onTertiary,\n    tertiaryContainer \u003d md_theme_dark_tertiaryContainer,\n    onTertiaryContainer \u003d md_theme_dark_onTertiaryContainer,\n    error \u003d md_theme_dark_error,\n    errorContainer \u003d md_theme_dark_errorContainer,\n    onError \u003d md_theme_dark_onError,\n    onErrorContainer \u003d md_theme_dark_onErrorContainer,\n    background \u003d md_theme_dark_background,\n    onBackground \u003d md_theme_dark_onBackground,\n    surface \u003d md_theme_dark_surface,\n    onSurface \u003d md_theme_dark_onSurface,\n    surfaceVariant \u003d md_theme_dark_surfaceVariant,\n    onSurfaceVariant \u003d md_theme_dark_onSurfaceVariant,\n    outline \u003d md_theme_dark_outline,\n    inverseOnSurface \u003d md_theme_dark_inverseOnSurface,\n    inverseSurface \u003d md_theme_dark_inverseSurface,\n    inversePrimary \u003d md_theme_dark_inversePrimary,\n    surfaceTint \u003d md_theme_dark_surfaceTint,\n    outlineVariant \u003d md_theme_dark_outlineVariant,\n    scrim \u003d md_theme_dark_scrim,\n)\n\n\nprivate val LightColorScheme \u003d lightColorScheme(\n    primary \u003d md_theme_light_primary,\n    onPrimary \u003d md_theme_light_onPrimary,\n    primaryContainer \u003d md_theme_light_primaryContainer,\n    onPrimaryContainer \u003d md_theme_light_onPrimaryContainer,\n    secondary \u003d md_theme_light_secondary,\n    onSecondary \u003d md_theme_light_onSecondary,\n    secondaryContainer \u003d md_theme_light_secondaryContainer,\n    onSecondaryContainer \u003d md_theme_light_onSecondaryContainer,\n    tertiary \u003d md_theme_light_tertiary,\n    onTertiary \u003d md_theme_light_onTertiary,\n    tertiaryContainer \u003d md_theme_light_tertiaryContainer,\n    onTertiaryContainer \u003d md_theme_light_onTertiaryContainer,\n    error \u003d md_theme_light_error,\n    errorContainer \u003d md_theme_light_errorContainer,\n    onError \u003d md_theme_light_onError,\n    onErrorContainer \u003d md_theme_light_onErrorContainer,\n    background \u003d md_theme_light_background,\n    onBackground \u003d md_theme_light_onBackground,\n    surface \u003d md_theme_light_surface,\n    onSurface \u003d md_theme_light_onSurface,\n    surfaceVariant \u003d md_theme_light_surfaceVariant,\n    onSurfaceVariant \u003d md_theme_light_onSurfaceVariant,\n    outline \u003d md_theme_light_outline,\n    inverseOnSurface \u003d md_theme_light_inverseOnSurface,\n    inverseSurface \u003d md_theme_light_inverseSurface,\n    inversePrimary \u003d md_theme_light_inversePrimary,\n    surfaceTint \u003d md_theme_light_surfaceTint,\n    outlineVariant \u003d md_theme_light_outlineVariant,\n    scrim \u003d md_theme_light_scrim,\n)\n\n@Composable\nfun MultiplyTheme(\n    darkTheme: Boolean \u003d isSystemInDarkTheme(),\n    // Dynamic color is available on Android 12+\n    dynamicColor: Boolean \u003d true,\n    content: @Composable () -\u003e Unit\n) {\n    val colorScheme \u003d when {\n        dynamicColor \u0026\u0026 Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.S -\u003e {\n            val context \u003d LocalContext.current\n            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)\n        }\n\n        darkTheme -\u003e DarkColorScheme\n        else -\u003e LightColorScheme\n    }\n    val view \u003d LocalView.current\n    if (!view.isInEditMode) {\n        SideEffect {\n            val window \u003d (view.context as Activity).window\n            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars \u003d !darkTheme\n        }\n    }\n\n    MaterialTheme(\n        colorScheme \u003d colorScheme,\n        typography \u003d Typography,\n        content \u003d content\n    )\n}\n```\n\u003c/file_contents\u003e\n\n\n\u003cfile_contents\u003e\n```kotlin:app/src/main/java/com/stephenwanjala/multiply/ui/theme/Type.kt, lines\u003dALL(1-112)\npackage com.stephenwanjala.multiply.ui.theme\n\n\nimport androidx.compose.material3.Typography\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.Font\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.sp\nimport com.stephenwanjala.multiply.R\n\nval family \u003d FontFamily(\n    fonts \u003d listOf(\n        Font(R.font.comic),\n        Font(R.font.comici),\n        Font(R.font.comicsansms3),\n        Font(R.font.comicz),\n        Font(R.font.designgraffiticomicsansms),\n        Font(R.font.designgraffiticomicsansmsgras),\n    )\n)\n\nprivate val defaultTypography \u003d Typography()\n\n// Set of Material typography styles to start with\nval Typography \u003d Typography(\n    bodyLarge \u003d TextStyle(\n        fontFamily \u003d family,\n        fontWeight \u003d FontWeight.Normal,\n        fontSize \u003d 16.sp,\n        lineHeight \u003d 24.sp,\n        letterSpacing \u003d 0.5.sp\n    ),\n    bodyMedium \u003d defaultTypography.bodyMedium.copy(fontFamily \u003d family),\n    bodySmall \u003d TextStyle(\n        fontFamily \u003d family,\n        fontWeight \u003d FontWeight.Normal,\n        fontSize \u003d 12.sp,\n        lineHeight \u003d 18.sp,\n        letterSpacing \u003d 0.25.sp\n    ),\n    headlineLarge \u003d TextStyle(\n        fontFamily \u003d family,\n        fontWeight \u003d FontWeight.Bold,\n        fontSize \u003d 24.sp,\n        lineHeight \u003d 32.sp,\n        letterSpacing \u003d 0.25.sp\n    ),\n    headlineMedium \u003d TextStyle(\n        fontFamily \u003d family,\n        fontWeight \u003d FontWeight.Bold,\n        fontSize \u003d 20.sp,\n        lineHeight \u003d 28.sp,\n        letterSpacing \u003d 0.2.sp\n    ),\n    headlineSmall \u003d TextStyle(\n        fontFamily \u003d family,\n        fontWeight \u003d FontWeight.Bold,\n        fontSize \u003d 18.sp,\n        lineHeight \u003d 24.sp,\n        letterSpacing \u003d 0.15.sp\n    ),\n    titleLarge \u003d TextStyle(\n        fontFamily \u003d family,\n        fontWeight \u003d FontWeight.Bold,\n        fontSize \u003d 18.sp,\n        lineHeight \u003d 24.sp,\n        letterSpacing \u003d 0.15.sp\n    ),\n    titleMedium \u003d TextStyle(\n        fontFamily \u003d family,\n        fontWeight \u003d FontWeight.Bold,\n        fontSize \u003d 16.sp,\n        lineHeight \u003d 22.sp,\n        letterSpacing \u003d 0.15.sp\n    ),\n    titleSmall \u003d TextStyle(\n        fontFamily \u003d family,\n        fontWeight \u003d FontWeight.Bold,\n        fontSize \u003d 14.sp,\n        lineHeight \u003d 20.sp,\n        letterSpacing \u003d 0.1.sp\n    ),\n    labelLarge \u003d TextStyle(\n        fontFamily \u003d family,\n        fontWeight \u003d FontWeight.Normal,\n        fontSize \u003d 14.sp,\n        lineHeight \u003d 20.sp,\n        letterSpacing \u003d 0.1.sp\n    ),\n    labelMedium \u003d TextStyle(\n        fontFamily \u003d family,\n        fontWeight \u003d FontWeight.Normal,\n        fontSize \u003d 12.sp,\n        lineHeight \u003d 18.sp,\n        letterSpacing \u003d 0.1.sp\n    ),\n    labelSmall \u003d TextStyle(\n        fontFamily \u003d family,\n        fontWeight \u003d FontWeight.Normal,\n        fontSize \u003d 10.sp,\n        lineHeight \u003d 16.sp,\n        letterSpacing \u003d 0.1.sp\n    ),\n    displayLarge \u003d defaultTypography.displayLarge.copy(\n        fontFamily \u003d family\n    ),\n    displayMedium \u003d defaultTypography.displayMedium.copy(fontFamily \u003d family),\n    displaySmall \u003d defaultTypography.displaySmall.copy(fontFamily \u003d family),\n\n    )\n\n```\n\u003c/file_contents\u003e\n\n\u003c/attached_files\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\nEvaluate the design choices and improve them and also the UI and Functionaliity of the game Modes\n\u003c/user_query\u003e&quot;}]}]}" />
      </map>
    </option>
  </component>
</project>