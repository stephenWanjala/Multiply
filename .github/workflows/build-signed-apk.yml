name: Build Signed APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      JAVA_VERSION: '17'
      ANDROID_SDK_ROOT: /usr/local/android-sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      - name: Install required Android packages
        run: |
          sdkmanager "platform-tools" "platforms;android-36" "build-tools;36.0.0"

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - name: Decode and save keystore
        if: ${{ github.event_name != 'pull_request' }}
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          if [ -n "$ANDROID_KEYSTORE_BASE64" ]; then
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > app/release.keystore
            echo "Keystore written to app/release.keystore"
          else
            echo "ANDROID_KEYSTORE_BASE64 not set; build will be unsigned."
          fi

      - name: Build release APK (unsigned)
        run: ./gradlew :app:assembleRelease --stacktrace

      - name: Zipalign APK
        if: ${{ github.event_name != 'pull_request' && secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          UNSIGNED_APK=$(find app/build/outputs/apk/release -name "*.apk" | head -n 1)
          echo "Found unsigned APK: $UNSIGNED_APK"
          ZIPALIGNED_APK=${UNSIGNED_APK%.apk}-aligned.apk
          "/usr/local/android-sdk/build-tools/36.0.0/zipalign" -v -p 4 "$UNSIGNED_APK" "$ZIPALIGNED_APK"
          echo "ZIPALIGNED_APK=$ZIPALIGNED_APK" >> $GITHUB_ENV

      - name: Sign APK
        if: ${{ github.event_name != 'pull_request' && secrets.ANDROID_KEYSTORE_BASE64 }}
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          APK_TO_SIGN="$ZIPALIGNED_APK"
          if [ -z "$APK_TO_SIGN" ]; then
            echo "ZIPALIGNED_APK not set" && exit 1
          fi
          /usr/local/android-sdk/build-tools/36.0.0/apksigner sign \
            --ks app/release.keystore \
            --ks-pass pass:"$ANDROID_KEYSTORE_PASSWORD" \
            --key-pass pass:"$ANDROID_KEY_PASSWORD" \
            --ks-key-alias "$ANDROID_KEY_ALIAS" \
            "$APK_TO_SIGN"
          echo "SIGNED_APK=$APK_TO_SIGN" >> $GITHUB_ENV

      - name: Verify APK signature
        if: ${{ github.event_name != 'pull_request' && secrets.ANDROID_KEYSTORE_BASE64 }}
        run: /usr/local/android-sdk/build-tools/36.0.0/apksigner verify --print-certs "$SIGNED_APK"

      - name: Collect artifact path
        run: |
          if [ -n "$SIGNED_APK" ]; then
            echo "ARTIFACT_APK=$SIGNED_APK" >> $GITHUB_ENV
          else
            # Fall back to unsigned APK for PR builds
            APK=$(find app/build/outputs/apk/release -name "*.apk" | head -n 1)
            echo "ARTIFACT_APK=$APK" >> $GITHUB_ENV
          fi
          echo "Artifact APK: $ARTIFACT_APK"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: Multiply-APK
          path: ${{ env.ARTIFACT_APK }}
          if-no-files-found: error

# Required repository secrets for signed builds on main/master and manual runs:
# - ANDROID_KEYSTORE_BASE64: base64-encoded .keystore or .jks file
# - ANDROID_KEYSTORE_PASSWORD: keystore password
# - ANDROID_KEY_ALIAS: key alias
# - ANDROID_KEY_PASSWORD: key password
