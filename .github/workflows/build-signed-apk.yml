name: Build Signed APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      JAVA_VERSION: '17'
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          sdk-path: ${{ env.ANDROID_SDK_ROOT }}

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      - name: Install required Android packages
        run: |
          sdkmanager "platform-tools" "platforms;android-36" "build-tools;36.0.0"

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - name: Decode and save keystore
        if: ${{ github.event_name != 'pull_request' && env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > app/release.keystore
          echo "Keystore written to app/release.keystore"

      - name: Build release APK (unsigned)
        run: ./gradlew :app:assembleRelease --stacktrace

      - name: Zipalign APK
        if: ${{ github.event_name != 'pull_request' && env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          UNSIGNED_APK=$(find app/build/outputs/apk/release -name "*.apk" | head -n 1)
          echo "Found unsigned APK: $UNSIGNED_APK"
          ZIPALIGNED_APK=${UNSIGNED_APK%.apk}-aligned.apk
          "${ANDROID_SDK_ROOT}/build-tools/36.0.0/zipalign" -v -p 4 "$UNSIGNED_APK" "$ZIPALIGNED_APK"
          echo "ZIPALIGNED_APK=${ZIPALIGNED_APK}" >> $GITHUB_ENV

      - name: Sign APK
        if: ${{ github.event_name != 'pull_request' && env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          APK_TO_SIGN="$ZIPALIGNED_APK"
          "${ANDROID_SDK_ROOT}/build-tools/36.0.0/apksigner" sign \
            --ks app/release.keystore \
            --ks-pass pass:"$ANDROID_KEYSTORE_PASSWORD" \
            --key-pass pass:"$ANDROID_KEY_PASSWORD" \
            --ks-key-alias "$ANDROID_KEY_ALIAS" \
            "$APK_TO_SIGN"
          echo "SIGNED_APK=${APK_TO_SIGN}" >> $GITHUB_ENV

      - name: Rename signed APK
        if: ${{ github.event_name != 'pull_request' && env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          mv "$ZIPALIGNED_APK" app/build/outputs/apk/release/Multiply.apk
          echo "SIGNED_APK=app/build/outputs/apk/release/Multiply.apk" >> $GITHUB_ENV
          echo "Renamed signed APK to Multiply.apk"

      - name: Verify APK signature
        if: ${{ github.event_name != 'pull_request' && env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          "${ANDROID_SDK_ROOT}/build-tools/36.0.0/apksigner" verify --print-certs "$SIGNED_APK"

      - name: Collect artifact path
        run: |
          if [ -n "$SIGNED_APK" ]; then
            echo "ARTIFACT_APK=${SIGNED_APK}" >> $GITHUB_ENV
          else
            APK=$(find app/build/outputs/apk/release -name "*.apk" | head -n 1)
            echo "ARTIFACT_APK=${APK}" >> $GITHUB_ENV
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: Multiply-APK
          path: ${{ env.ARTIFACT_APK }}
          if-no-files-found: error

  release:
    needs: build
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: Multiply-APK
          path: ./release-apk

      - name: Get APK filename
        id: get_apk
        run: |
          echo "APK_FILE=$(find ./release-apk -name '*.apk' | head -n 1)" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.APK_FILE }}
          tag_name: v${{ github.run_number }}
          name: "Release Build #${{ github.run_number }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
